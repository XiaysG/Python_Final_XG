[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "On this about page, you might want to add more information about yourself, the project, or course. Any helpful context could go here!\nMy name is Nick Hand, the instructor for the course. You can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2023.\nAdipisicing proident minim non non dolor quis. Pariatur in ipsum aliquip magna. Qui ad aliqua nulla excepteur dolor nostrud quis nisi. Occaecat proident eiusmod in cupidatat. Elit qui laboris sit aliquip proident dolore. Officia commodo commodo in eiusmod aliqua sint cupidatat consectetur aliqua sint reprehenderit.\nOccaecat incididunt esse et elit adipisicing sit est cupidatat consequat. Incididunt exercitation amet dolor non sit anim veniam veniam sint velit. Labore irure reprehenderit ut esse. Minim quis commodo nisi voluptate."
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550 Final Project Template",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "MUSA 550 Final Project Template",
    "section": "Find out more",
    "text": "Find out more\nThe code for this repository is hosted on our course’s GitHub page: https://github.com/MUSA-550-Fall-2023/quarto-website-template.\nWe covered the basics of getting started with Quarto and GitHub Pages in week 9. Take a look at the slides for lecture 9A to find out more."
  },
  {
    "objectID": "analysis/Final.html#profiling-the-walking-trips-and-pedestrians-in-philadelphia-in-2012",
    "href": "analysis/Final.html#profiling-the-walking-trips-and-pedestrians-in-philadelphia-in-2012",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "1. Profiling the Walking Trips and Pedestrians in Philadelphia in 2012",
    "text": "1. Profiling the Walking Trips and Pedestrians in Philadelphia in 2012\nIn the first section, I delve into the pedestrian dynamics of Philadelphia in 2012, aiming to unpack the walking trip patterns and profile those who most frequently travel by foot. My exploration spans various dimensions, from the origins and destinations of these journeys to the walkers’ socioeconomic characteristics, including income levels, vehicle ownership, gender, age, race, and education. This comprehensive overview not only illuminates the prevalent trends in walking trips but also highlights the diverse tapestry of individuals who opt for pedestrian travel, thereby offering an encompassing snapshot of urban mobility within the city.\n\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport datetime\nimport math\nfrom pandana.loaders import osm\nimport folium\n\n\ntrip = pd.read_excel('data/4_Trip_Public.xlsx')\ntrip.head ()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nD_COUNTY\nD_CPA\nD_MCD\nD_TRACT\nD_TAZ\nGPSFactor\nSurvey_TravTime\nModel_TravTime\nModel_TravDist\nCompositeWeight\n\n\n\n\n0\n1\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n1\n...\n34007.0\n007_802\n3.400712e+09\n3.400760e+10\n22228.0\n1.12\n15.0\n7.456654\n1.535654\n148.448239\n\n\n1\n2\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n2\n...\n34007.0\n007_802\n3.400712e+09\n3.400760e+10\n22231.0\n1.12\n7.0\n7.810088\n1.675524\n148.448239\n\n\n2\n3\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n3\n...\n34005.0\n005_702\n3.400544e+09\n3.400570e+10\n20225.0\n1.12\n12.0\n9.363016\n2.301180\n148.448239\n\n\n3\n4\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n4\n...\n34005.0\n005_702\n3.400544e+09\n3.400570e+10\n20227.0\n1.12\n16.0\n6.233144\n1.086251\n148.448239\n\n\n4\n5\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n5\n...\n34005.0\n005_702\n3.400544e+09\n3.400570e+10\n20225.0\n1.12\n10.0\n6.258231\n1.208349\n148.448239\n\n\n\n\n5 rows × 82 columns\n\n\n\n\n# Trim to Phily and bike trip\nwalk = trip[(trip['O_COUNTY'] == 42101) & (trip['MODE_AGG'] == 1)]\n\nwalk.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nD_COUNTY\nD_CPA\nD_MCD\nD_TRACT\nD_TAZ\nGPSFactor\nSurvey_TravTime\nModel_TravTime\nModel_TravDist\nCompositeWeight\n\n\n\n\n12\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n113.0\n1.17\n15.0\n16.783789\n0.867162\n328.937729\n\n\n13\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n44.0\n1.17\n11.0\n12.350352\n0.638102\n328.937729\n\n\n302\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n35.0\n1.13\n9.0\nNaN\nNaN\n246.584019\n\n\n303\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n38.0\n1.13\n10.0\n11.381527\n0.588046\n246.584019\n\n\n991\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n55.0\n1.13\n10.0\n16.072276\n0.830401\n93.130844\n\n\n\n\n5 rows × 82 columns\n\n\n\n\n1.1 What Type of Walking Trips Happened in Philadelphia in 2012\nFrom the presented data, it is evident that walking trips in Philadelphia in 2012 were predominantly initiated and concluded at a variety of locations classified under ‘Other’, denoting a diverse range of non-home and non-work-related starting and ending points. This diversity in trip locations correlates with a higher frequency of walking trips associated with home activities that are not related to work, school, or online engagements. Despite the variety in origins and destinations, there is a notable preference for walking trips that end at ‘Home’, suggesting that Philadelphia residents may prefer walking for returning home from various activities. In contrast, walking trips starting from ‘Work’ are less frequent than those ending there, hinting at the possibility that walking is less preferred for commuting to work. The subsequent chart detailing the types of activities associated with walking trips reinforces the inference that non-work-related activities, particularly those centered around the home, are the primary motivators for walking.\nThe first pair of charts compare the frequency of different types of locations from where people start and end their walking trips. The categories include ‘Other’, ‘Work’, ‘Home’, and ‘School’. For origins, the ‘Other’ category has the highest count, indicating that most walking trips begin at locations other than work, home, or school. This is followed by ‘Work’, ‘Home’, and ‘School’ which has the least count. For destinations, ‘Other’ also has the highest count, suggesting that destinations are similarly varied. However, ‘Home’ has a significantly higher count as a destination than as an origin, while ‘Work’ has a lower count as a destination than as an origin. ‘School’ remains the least frequent destination.\n\nreplacement_dict = {1: 'Home', 2: 'Work', 3: 'School', 4: 'Other'}\n\nwalk['O_LOC_TYPE'] = walk['O_LOC_TYPE'].replace(replacement_dict)\nwalk['D_LOC_TYPE'] = walk['D_LOC_TYPE'].replace(replacement_dict)\n\nsns.set_style(\"whitegrid\")\n\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n# Plot Origin Loc Type \nsns.countplot(x='O_LOC_TYPE', data=walk, ax=ax[0])\nax[0].set_title('Frequency of  Origin Loc Type ')\nax[0].set_xlabel('Origin Loc Type ')\nax[0].set_ylabel('Count')\n\n# Plot Destination Loc Type \nsns.countplot(x='D_LOC_TYPE', data=walk, ax=ax[1])\nax[1].set_title('Frequency of Destination Loc Type')\nax[1].set_xlabel('Destination Loc Type')\nax[1].set_ylabel('Count')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1475632616.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['O_LOC_TYPE'] = walk['O_LOC_TYPE'].replace(replacement_dict)\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1475632616.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['D_LOC_TYPE'] = walk['D_LOC_TYPE'].replace(replacement_dict)\n\n\n\n\n\nThe following chart shows the frequency of different types of activities for which walking is used. The most common activity is ‘Home activities not related to work, school, or online’, indicating that walking is most frequently used for local errands or tasks around the house. This is followed by ‘Work for pay’ and ‘Change type of transportation/transfer’. Activities like ‘Social (visit friends, relatives, etc.)’, ‘Medical (medical appointment, medical procedure, etc.)’, and ‘Recreation-watch/observe (movies, concert, sports event, etc.)’ have lower frequencies.\n\n# Find out activity type\nactivity_dict = { 1: 'Home activities not related to work, school, or online',\n                 2: 'Homework, class related assignments or attended an online course',\n                 3: 'Attended classes',\n                 4: 'Attended other school activities (performances, meetings, clubs)',\n                 5: 'Work for pay',\n                 6: 'Personal business (banking or ATM, salon, library)',\n                 7: 'Online personal business (banking, e-mail, etc.)',\n                 8: 'Everyday shopping (grocery, drug store, gas, etc.)',\n                 9: 'Major shopping (appliances, cars, home furnishings, clothes, etc.)',\n                 10: 'Online shopping for products, services or goods',\n                 11: 'Eat out (restaurant, drive-thru, etc.)',\n                 12: 'Social (visit friends, relatives, etc.)',\n                 13: 'Social/community/religious (meetings, worhship, wedding, funeral, etc.)',\n                 14: 'Recreation- active participation (sports, exercise, walk the dog, etc.)',\n                 15: 'Recreation-watch/observe (movies, concert, sports event, etc.)',\n                 16: 'Medical (medical appointment, medical procedure, etc.)',\n                 17: 'Pick up passenger',\n                 18: 'Drop off passenger',\n                 19: 'Change type of transportation/transfer',\n                 20: 'Accompany household member',\n                 96: 'Other activity'}\n\nwalk['ACTIV1'] = walk['ACTIV1'].replace(activity_dict)\n\nplt.figure(figsize=(10, 8))\n\n\nactivity_counts = walk['ACTIV1'].value_counts()\nsns.barplot(y=activity_counts.index, x=activity_counts.values)\nplt.title('Frequency of Walk Activity Type')\nplt.xlabel('Count')\nplt.ylabel('Activity')\n\nfor index, value in enumerate(activity_counts.values):\n    plt.text(value, index, f'{value}')\n\nplt.show()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\28425172.py:24: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['ACTIV1'] = walk['ACTIV1'].replace(activity_dict)\n\n\n\n\n\n\n\n1.2 Who Prefer to Walk\nThen, the following analysis of Philadelphia’s pedestrian demographics in 2012 reveals a nuanced portrait influenced by various socioeconomic factors. The data on total vehicles indicates that individuals with no vehicles in their household are the most likely to walk, which is consistent across all income brackets except for the highest and lowest, where walking is less prevalent. Income distribution among pedestrians shows a fairly even spread, with slight peaks in the middle-income ranges, suggesting that walking is not exclusively linked to any single income level.\nGender distribution shows a modest preference for walking among females compared to males. Age-wise, the 25-74 age group is the most inclined to walk, with a notable peak in the 55-59 bracket, highlighting the potential for walking as a consistent transportation choice across a broad adult age spectrum.\nRacial demographics indicate that White individuals and those identifying as Asian are more represented among walkers than other races, with Black/African American and Hispanic or Latino individuals walking less by comparison. Education level data shows a clear trend: individuals with higher educational attainment, specifically those with a bachelor’s or graduate degree, are more likely to walk than those with lower levels of education or some college credit.\nIn summary, the typical pedestrian in Philadelphia in 2012 would likely be a person without a vehicle in their household, belonging to the middle-income bracket, and leaning slightly towards the female demographic. Age-wise, adults, particularly those between 25 to 74 years old, with a concentration around late 50s, are the most common walkers. A higher educational background correlates positively with the likelihood of walking, while White and Asian residents tend to walk more than other racial groups. These insights draw a picture of pedestrians in Philadelphia as a diverse group with a significant representation among middle-aged, educated individuals, suggesting that walking is a transportation mode that cuts across various socioeconomic layers, albeit with certain demographic tendencies.\n\n# Load other df\nhh = pd.read_excel('data/1_Household_Public.xlsx')\n\nper = pd.read_excel('data/2_Person_Public.xlsx')\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nwalk = walk.merge(hh[['HH_ID', 'TOT_VEH', 'INCOME']], on='HH_ID', how='left')\nwalk = walk.merge(per[['PERSON_ID', 'GEND', 'AGECAT', 'RACE', 'EDUCA']], on='PERSON_ID', how='left')\n\n\n# Create mappings for the variables hh and person \ngend_mapping = {1: 'Male', 2: 'Female', 99: 'Refused'}\nagecat_mapping = {\n    1: '5 or younger', 2: '6 to 12', 3: '13 to 15', 4: '16 to 17', \n    5: '18 to 24', 6: '25 to 34', 7: '35 to 44', 8: '45 to 54', \n    9: '55 to 64', 10: '65 to 74', 11: '75 to 85', 12: '86 and over',\n    98: \"Don't know\", 99: 'Refused'\n}\n\nrace_mapping = {\n    1: 'White/Caucasian', 2: 'Black/African American', 3: 'Hispanic or Latino',\n    4: 'American Indian or Alaska Native', 5: 'Asian', 6: 'Native Hawaiian or Pacific Islander',\n    97: 'Other, Specify', 98: \"Don't Know\", 99: 'Refused', 100: 'Multi-race'\n}\neduca_mapping = {\n    1: 'Not a high school graduate', 2: 'High school graduate', 3: 'Some college credit',\n    4: 'Associate or technical school degree', 5: \"Bachelor's or undergraduate degree\",\n    6: 'Graduate degree', 97: 'Other', 98: \"Don't know\", 99: 'Refused'\n}\nincome_mapping = {\n    1: '$0 to $9,999', 2: '$10,000 to $24,999', 3: '$25,000 to $34,999', 4: '$35,000 to $49,999',\n    5: '$50,000 to $74,999', 6: '$75,000 to $99,999', 7: '$100,000 to $149,999',\n    8: '$150,000 to $199,999', 9: '$200,000 to $249,999', 10: '$250,000 or more',\n    98: \"Don't know\", 99: 'Refused'\n}\n\nwalk['GEND'] = walk['GEND'].map(gend_mapping)\nwalk['AGECAT'] = walk['AGECAT'].map(agecat_mapping)\nwalk['RACE'] = walk['RACE'].map(race_mapping)\nwalk['EDUCA'] = walk['EDUCA'].map(educa_mapping)\nwalk['INCOME'] = walk['INCOME'].map(income_mapping)\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))  \n\nwalk['TOT_VEH'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 0], title='Total Vehicles')\nwalk['INCOME'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 1], title='Income')\nwalk['GEND'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 2], title='Gender')\nwalk['AGECAT'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 0], title='Age Category')\nwalk['RACE'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 1], title='Race')\nwalk['EDUCA'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 2], title='Education')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nIn conclusion, the multifaceted examination of walking trips in Philadelphia in 2012 reveals that walking is a mode of transportation embraced across a spectrum of socioeconomic backgrounds, with particular tendencies shaped by the absence of vehicles, middle-income brackets, and higher educational attainments. Notably, the proclivity to walk is slightly more common among females and notably prevalent in the 25-74 age demographic, with a surprising peak among those in their late fifties. Additionally, while White and Asian residents are more represented among pedestrians, the data indicates that walking is a universally adopted practice with a presence in every income category and demographic segment. These findings reflect the inherent complexity of pedestrian movement patterns and suggest that walking, as an integral element of urban life, is influenced by a confluence of personal, economic, and cultural factors that define the pedestrian landscape of Philadelphia."
  },
  {
    "objectID": "analysis/Final.html#where-do-people-walk-in-philadelphia-in-2012",
    "href": "analysis/Final.html#where-do-people-walk-in-philadelphia-in-2012",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "2. Where Do People Walk in Philadelphia in 2012",
    "text": "2. Where Do People Walk in Philadelphia in 2012\nIn the second section of my analysis, I turn my focus to the spatial dynamics of pedestrian movement within Philadelphia, unraveling the patterns of where residents choose to walk. Through a series of flow maps and heat maps, I discern the urban fabric’s influence on pedestrian behavior. The central district emerges as the epicenter of pedestrian activity, with a vibrant flux of walkers traversing its streets, likely due to commercial, cultural, and civic amenities. Adjacent areas such as the lower north, south, University southwest, and west districts also exhibit significant pedestrian traffic, albeit less densely clustered than the central district. In stark contrast, the lower southwest and lower south districts present as pedestrian deserts, areas where foot traffic is markedly sparse. These regions may lack pedestrian-friendly infrastructure or destinations that encourage walking. The overlaid heat maps, distinguishing between origins and destinations, further underscore these patterns, revealing hotspots of pedestrian origination and culmination. When combined, these visual tools paint a detailed picture of walking patterns across the city, highlighting areas of high pedestrian engagement and pinpointing zones that could benefit from urban design interventions to enhance walkability and connectivity.\n\n# load Census Tract\n\nimport pygris\n\npa_state_code = '42' \nphilly_county_code = '101'\n\nphilly_tract = pygris.tracts(state=pa_state_code, county=philly_county_code, year=2012)\n\nphilly_tract.head(5)\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\nINTPTLAT\nINTPTLON\ngeometry\n\n\n\n\n1783\n42\n101\n038100\n42101038100\n381\nCensus Tract 381\nG5020\nS\n3335030\n1629584\n+40.0189334\n-075.0399564\nPOLYGON ((-75.06785 40.01121, -75.06752 40.011...\n\n\n1784\n42\n101\n038400\n42101038400\n384\nCensus Tract 384\nG5020\nS\n2546786\n0\n+40.0714163\n-075.2332568\nPOLYGON ((-75.24321 40.07356, -75.24313 40.073...\n\n\n1785\n42\n101\n038600\n42101038600\n386\nCensus Tract 386\nG5020\nS\n3304398\n32066\n+40.0582762\n-075.2110913\nPOLYGON ((-75.22199 40.07306, -75.22128 40.073...\n\n\n1786\n42\n101\n038500\n42101038500\n385\nCensus Tract 385\nG5020\nS\n1338942\n2576\n+40.0757528\n-075.2146234\nPOLYGON ((-75.22784 40.08423, -75.22774 40.084...\n\n\n1787\n42\n101\n038700\n42101038700\n387\nCensus Tract 387\nG5020\nS\n2053212\n22241\n+40.0833122\n-075.2130770\nPOLYGON ((-75.22977 40.08676, -75.22961 40.086...\n\n\n\n\n\n\n\n\nphilly_tract = philly_tract.to_crs(epsg=4326)\n\n# Calculate the centroid points in geographic coordinates\nphilly_tract['centroid'] = philly_tract.geometry.centroid\nphilly_tract['centroid_lat'] = philly_tract.centroid.y\nphilly_tract['centroid_lon'] = philly_tract.centroid.x\n\nphilly_tract.head()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\3754762874.py:4: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  philly_tract['centroid'] = philly_tract.geometry.centroid\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\3754762874.py:5: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  philly_tract['centroid_lat'] = philly_tract.centroid.y\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\3754762874.py:6: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  philly_tract['centroid_lon'] = philly_tract.centroid.x\n\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\nINTPTLAT\nINTPTLON\ngeometry\ncentroid\ncentroid_lat\ncentroid_lon\n\n\n\n\n1783\n42\n101\n038100\n42101038100\n381\nCensus Tract 381\nG5020\nS\n3335030\n1629584\n+40.0189334\n-075.0399564\nPOLYGON ((-75.06785 40.01121, -75.06752 40.011...\nPOINT (-75.03963 40.01770)\n40.017698\n-75.039634\n\n\n1784\n42\n101\n038400\n42101038400\n384\nCensus Tract 384\nG5020\nS\n2546786\n0\n+40.0714163\n-075.2332568\nPOLYGON ((-75.24321 40.07356, -75.24313 40.073...\nPOINT (-75.23326 40.07142)\n40.071418\n-75.233255\n\n\n1785\n42\n101\n038600\n42101038600\n386\nCensus Tract 386\nG5020\nS\n3304398\n32066\n+40.0582762\n-075.2110913\nPOLYGON ((-75.22199 40.07306, -75.22128 40.073...\nPOINT (-75.21027 40.05805)\n40.058053\n-75.210272\n\n\n1786\n42\n101\n038500\n42101038500\n385\nCensus Tract 385\nG5020\nS\n1338942\n2576\n+40.0757528\n-075.2146234\nPOLYGON ((-75.22784 40.08423, -75.22773 40.084...\nPOINT (-75.21369 40.07591)\n40.075907\n-75.213688\n\n\n1787\n42\n101\n038700\n42101038700\n387\nCensus Tract 387\nG5020\nS\n2053212\n22241\n+40.0833122\n-075.2130770\nPOLYGON ((-75.22977 40.08676, -75.22961 40.086...\nPOINT (-75.21434 40.08330)\n40.083299\n-75.214342\n\n\n\n\n\n\n\n\nphilly_tract['TRACTCE'] = philly_tract['TRACTCE'].astype(str)\n\nwalk['O_TRACT'] = walk['O_TRACT'].astype(str)\nwalk['D_TRACT'] = walk['D_TRACT'].astype(str)\n\n# only keep the strings for tract\nwalk['O_TRACT'] = walk['O_TRACT'].str[5:11]\nwalk['D_TRACT'] = walk['D_TRACT'].str[5:11]\n\nwalk.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nSurvey_TravTime\nModel_TravTime\nModel_TravDist\nCompositeWeight\nTOT_VEH\nINCOME\nGEND\nAGECAT\nRACE\nEDUCA\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n15.0\n16.783789\n0.867162\n328.937729\n2\n$50,000 to $74,999\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n11.0\n12.350352\n0.638102\n328.937729\n2\n$50,000 to $74,999\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n9.0\nNaN\nNaN\n246.584019\n2\nRefused\nMale\n35 to 44\nNaN\nGraduate degree\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n10.0\n11.381527\n0.588046\n246.584019\n2\nRefused\nMale\n35 to 44\nNaN\nGraduate degree\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n10.0\n16.072276\n0.830401\n93.130844\n2\nRefused\nFemale\n65 to 74\nNaN\nGraduate degree\n\n\n\n\n5 rows × 88 columns\n\n\n\n\n\n# Merge latitude and longitude for origins\nwalk = walk.merge(\n    philly_tract[['TRACTCE', 'centroid_lat', 'centroid_lon']].rename(\n        columns={'centroid_lat': 'origin_lat', 'centroid_lon': 'origin_lon','TRACTCE': 'origin_tra'}\n    ),\n    how='left', left_on='O_TRACT', right_on='origin_tra'\n)\n\n# Merge latitude and longitude for destinations\nwalk = walk.merge(\n    philly_tract[['TRACTCE', 'centroid_lat', 'centroid_lon']].rename(\n        columns={'centroid_lat': 'destination_lat', 'centroid_lon': 'destination_lon','TRACTCE': 'destination_tra'}\n    ),\n    how='left', left_on='D_TRACT', right_on='destination_tra'\n)\n\n\nwalk.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nGEND\nAGECAT\nRACE\nEDUCA\norigin_tra\norigin_lat\norigin_lon\ndestination_tra\ndestination_lat\ndestination_lon\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000804\n39.948566\n-75.167755\n000300\n39.957150\n-75.171232\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000300\n39.957150\n-75.171232\n000804\n39.948566\n-75.167755\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\nMale\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n001002\n39.945006\n-75.146618\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\nMale\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n000902\n39.947161\n-75.156637\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\nFemale\n65 to 74\nNaN\nGraduate degree\n000500\n39.951955\n-75.158176\n000600\n39.949386\n-75.158334\n\n\n\n\n5 rows × 94 columns\n\n\n\n\nimport folium\n\naverage_lat = walk[['origin_lat', 'destination_lat']].stack().mean()\naverage_lon = walk[['origin_lon', 'destination_lon']].stack().mean()\n\nod = folium.Map(location=[average_lat, average_lon], zoom_start=12,\n    tiles='CartoDB positron')\n\nfor idx, row in walk.iterrows():\n    if pd.notnull(row['origin_lat']) and pd.notnull(row['origin_lon']):\n        folium.CircleMarker(\n            location=[row['origin_lat'], row['origin_lon']],\n            radius=3,\n            color='skyblue',\n            fill=True,\n            fill_color='skyblue'\n        ).add_to(od)\n\n    if pd.notnull(row['destination_lat']) and pd.notnull(row['destination_lon']):\n        folium.CircleMarker(\n            location=[row['destination_lat'], row['destination_lon']],\n            radius=3,\n            color='pink',\n            fill=True,\n            fill_color='pink'\n        ).add_to(od)\n    \n    if pd.notnull(row['origin_lat']) and pd.notnull(row['origin_lon']) and \\\n       pd.notnull(row['destination_lat']) and pd.notnull(row['destination_lon']):\n        folium.PolyLine(\n            locations=[\n                [row['origin_lat'], row['origin_lon']],\n                [row['destination_lat'], row['destination_lon']]\n            ],\n            color='lavender',\n            weight=1\n        ).add_to(od)\n\nod\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Load the district boundaries file\ndistricts_gdf = gpd.read_file('data/Planning_Districts.geojson')\n\ndistricts_gdf = districts_gdf.to_crs(epsg=4326)\n\n\n# plot the heatmap with origin\nfrom folium.plugins import HeatMap\n\nheatmap_data = walk[['origin_lat', 'origin_lon']].dropna().values.tolist()\n\no_des = folium.Map(location=[average_lat, average_lon], zoom_start=12, tiles='CartoDB positron')\n\nHeatMap(heatmap_data).add_to(o_des)\n\nfor _, row in districts_gdf.iterrows():\n    sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'transparent', 'color': 'black'})\n    geo_j.add_to(o_des)\n\no_des\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# plot the heatmap with origin\nfrom folium.plugins import HeatMap\n\nheatmap_data2 = walk[['destination_lat', 'destination_lon']].dropna().values.tolist()\n\nd_des = folium.Map(location=[average_lat, average_lon], zoom_start=12, tiles='CartoDB positron')\n\nHeatMap(heatmap_data2).add_to(d_des)\n\nfor _, row in districts_gdf.iterrows():\n    sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'transparent', 'color': 'black'})\n    geo_j.add_to(d_des)\n\nd_des\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfrom folium.plugins import HeatMap\n\n# Assuming walk['origin_lat'] and walk['origin_lon'] are the coordinates for origins\nheatmap_data_origins = walk[['origin_lat', 'origin_lon']].dropna().values.tolist()\n\n# Assuming walk['destination_lat'] and walk['destination_lon'] are the coordinates for destinations\nheatmap_data_destinations = walk[['destination_lat', 'destination_lon']].dropna().values.tolist()\n\n# Create a Folium map centered around the average coordinates\nheat_combined = folium.Map(location=[average_lat, average_lon], zoom_start=12, tiles='CartoDB positron')\n\n# Add the origin heatmap layer with one color gradient\nHeatMap(heatmap_data_origins, radius=7, blur=15, gradient={0.2: 'blue', 0.4: 'cyan', 0.6: 'lime', 0.8: 'yellow'}).add_to(heat_combined)\n\n# Add the destination heatmap layer with another color gradient\nHeatMap(heatmap_data_destinations, radius=7, blur=15, gradient={0.2: 'purple', 0.4: 'violet', 0.6: 'magenta', 0.8: 'pink'}).add_to(heat_combined)\n\n# Overlay the district boundaries\nfor _, row in districts_gdf.iterrows():\n    sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'transparent', 'color': 'black', 'weight': 1})\n    geo_j.add_to(heat_combined)\n    \n\nheat_combined\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/Final.html#explore-center-city-as-the-pedestrain-busy-district",
    "href": "analysis/Final.html#explore-center-city-as-the-pedestrain-busy-district",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "3. Explore Center City as the Pedestrain Busy District",
    "text": "3. Explore Center City as the Pedestrain Busy District\n\n3.1 Why and Who Walk in Center City\nAfter uncovering the pedestrain busy district of center city, here in this section, I specifically examined the walk trips and pedestrains in center city.\nIn my exploration of pedestrian activities within Philadelphia’s central district, I identified distinctive patterns of movement. The data indicated a high frequency of ‘transfer’ activities, which suggests that the central district serves not only as a destination but also as a pivotal hub for pedestrian movement through the city. This is reflective of the dense network of public transit and the district’s role as a connector for various parts of the city. Among other prominent activities, ‘work for pay’ and ‘eat out (restaurant, drive-thru, etc.)’ were also significant, highlighting the central district’s commercial and social importance. Surprisingly, ‘home activities’ were the most frequent type of walk, which may be attributed to the residential pockets within the central district or the tendency of individuals to categorize errands close to home as ‘home activities’.\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\n# filter out the walk trip in the central district\n\nwalk_gdf = gpd.GeoDataFrame(walk, geometry=gpd.points_from_xy(walk.origin_lon, walk.origin_lat))\n\nwalk_gdf.crs = districts_gdf.crs\n\ncentral_polygon = districts_gdf.loc[districts_gdf['DIST_NAME'] == 'Central', 'geometry'].squeeze()\n\nwalk_in_central = walk_gdf[walk_gdf.geometry.within(central_polygon)]\n\nwalk_in_central.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nAGECAT\nRACE\nEDUCA\norigin_tra\norigin_lat\norigin_lon\ndestination_tra\ndestination_lat\ndestination_lon\ngeometry\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000804\n39.948566\n-75.167755\n000300\n39.957150\n-75.171232\nPOINT (-75.16775 39.94857)\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000300\n39.957150\n-75.171232\n000804\n39.948566\n-75.167755\nPOINT (-75.17123 39.95715)\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n001002\n39.945006\n-75.146618\nPOINT (-75.14662 39.94501)\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n000902\n39.947161\n-75.156637\nPOINT (-75.14662 39.94501)\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n65 to 74\nNaN\nGraduate degree\n000500\n39.951955\n-75.158176\n000600\n39.949386\n-75.158334\nPOINT (-75.15818 39.95195)\n\n\n\n\n5 rows × 95 columns\n\n\n\n\nactivity_mapping = { 1: 'Home activities not related to work, school, or online',\n                 2: 'Homework, class related assignments or attended an online course',\n                 3: 'Attended classes',\n                 4: 'Attended other school activities (performances, meetings, clubs)',\n                 5: 'Work for pay',\n                 6: 'Personal business (banking or ATM, salon, library)',\n                 7: 'Online personal business (banking, e-mail, etc.)',\n                 8: 'Everyday shopping (grocery, drug store, gas, etc.)',\n                 9: 'Major shopping (appliances, cars, home furnishings, clothes, etc.)',\n                 10: 'Online shopping for products, services or goods',\n                 11: 'Eat out (restaurant, drive-thru, etc.)',\n                 12: 'Social (visit friends, relatives, etc.)',\n                 13: 'Social/community/religious (meetings, worhship, wedding, funeral, etc.)',\n                 14: 'Recreation- active participation (sports, exercise, walk the dog, etc.)',\n                 15: 'Recreation-watch/observe (movies, concert, sports event, etc.)',\n                 16: 'Medical (medical appointment, medical procedure, etc.)',\n                 17: 'Pick up passenger',\n                 18: 'Drop off passenger',\n                 19: 'Change type of transportation/transfer',\n                 20: 'Accompany household member',\n                 96: 'Other activity'}\n\nwalk_in_central['ACTIV1'] = walk_in_central['ACTIV1'].map(activity_mapping)\n\n# Plotting\nplt.figure(figsize=(10, 8)) \nactivity_counts = walk_in_central['ACTIV1'].value_counts()\n\n\nordered_activities = activity_counts.reindex(activity_mapping.values())\n\n\nordered_activities.plot(kind='bar')\n\nplt.title('Frequency of Walk Activity Type')\nplt.xlabel('Activity')\nplt.ylabel('Count')\n\n\nplt.xticks(rotation=90) \n\n\nfor index, value in enumerate(ordered_activities.values):\n    plt.text(index, value, f'{value}') \n\nplt.tight_layout() \nplt.show()\n\nD:\\Anaconda\\Install\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\n\n\n\n\n\nUpon reprofiling the pedestrian demographic within the central district, I found that the socioeconomic characteristics closely mirrored those observed citywide. Vehicle ownership, income, age, race, gender, and education level demonstrated similar trends, with no significant deviations. This lack of disparity suggests a consistent pedestrian demographic across the city, irrespective of the more intense walking activity in the central district. Most walkers belonged to households without a vehicle, spanned across a diverse range of income levels, and were predominantly White/Caucasian with at least a graduate degree, reflecting the broader city’s pedestrian profile. However, it was interesting to note that the central district’s pedestrian population was just as diverse as the rest of Philadelphia, reinforcing the notion that walking as a mode of transport transcends socioeconomic boundaries within urban centers.\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))  \n\nwalk_in_central['TOT_VEH'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 0], title='Total Vehicles')\nwalk_in_central['INCOME'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 1], title='Income')\nwalk_in_central['GEND'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 2], title='Gender')\nwalk_in_central['AGECAT'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 0], title='Age Category')\nwalk_in_central['RACE'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 1], title='Race')\nwalk_in_central['EDUCA'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 2], title='Education')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n3.2 What are There in Center City Attracting People to Walk Here\nIn the latter half of my analysis of Center City, I delved into the urban elements that contribute to its high pedestrian traffic. I used OpenStreetMap to overlay various components of the urban environment, revealing a dense and intricate web of walkways that form the backbone of pedestrian movement in the area. My mapping highlighted an extensive network of roads frequented by pedestrians, which are well-serviced by an array of public transit options, including numerous bus stops and metro stations strategically located throughout the district.\nThe presence of these amenities suggests a cityscape thoughtfully designed to encourage walking, where the convenience of public transport complements pedestrian pathways. Moreover, my data visualizations pinpointed clusters of restaurants, schools, and commercial blocks, which serve as vital nodes of activity, drawing people onto the streets. These commercial hubs are not only destinations but also waypoints that enliven the pedestrian experience with their vibrancy and accessibility.\n\nimport osmnx as ox\nox.config(use_cache=True, log_console=True)\n\n# For bus stops\nbus_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'highway': 'bus_stop'})\n\n# For metro stops \nmetro_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'railway': 'station'})\n\n# For restaurants\nrestaurants = ox.geometries_from_place('Center City,Philadelphia, PA', tags={\"amenity\": [\"pub\", \"bar\", \"restaurant\"]})\n\n# For schools\nschools = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'amenity': 'school'})\n\n# For commercial blocks\ncommercial = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'landuse': 'commercial'})\n\n# For parks\nparks = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'leisure': 'park'})\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:2: UserWarning: The `utils.config` function is deprecated and will be removed in a future release. Instead, use the `settings` module directly to configure a global setting's value. For example, `ox.settings.log_console=True`.\n  ox.config(use_cache=True, log_console=True)\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:5: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  bus_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'highway': 'bus_stop'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:8: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  metro_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'railway': 'station'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:11: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  restaurants = ox.geometries_from_place('Center City,Philadelphia, PA', tags={\"amenity\": [\"pub\", \"bar\", \"restaurant\"]})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:14: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  schools = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'amenity': 'school'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:17: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  commercial = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'landuse': 'commercial'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:20: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  parks = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'leisure': 'park'})\n\n\n\n# the \"walk\" network\nG = ox.graph_from_address(\"Center City, Philadelphia, PA\", network_type=\"walk\")\nox.plot_graph(ox.project_graph(G), node_size=0)\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n\nG_cc = ox.graph_from_polygon(central_polygon, network_type=\"walk\")\n\n# only get the edges\ncc_edges = ox.graph_to_gdfs(G_cc, edges=True, nodes=False)\n\n# add the neighborhood boundaries\nboundary = gpd.GeoSeries([central_polygon], crs=\"EPSG:4326\")\n\ncc_edges.explore(tiles='cartodb positron')\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport geopandas as gpd\n\ncentroid = central_polygon.centroid\ncentral_point = centroid\n\nlongitude = central_point.x\nlatitude = central_point.y\n\n\nimport folium\n\nbus = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in bus_stops.iterrows():\n    folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Bus Stop').add_to(bus)\n\nbus\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nmetro = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in metro_stops.iterrows():\n    folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Metro Stops').add_to(metro)\n\nmetro\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nrestaurant_points = restaurants[restaurants.geometry.type == 'Point']\n\nmap_center = restaurant_points.geometry.unary_union.centroid\n\nres_m = folium.Map(location=[map_center.y, map_center.x], zoom_start=14)\n\nfor idx, row in restaurant_points.iterrows():\n    folium.Marker(\n        location=[row.geometry.y, row.geometry.x], \n        popup='Restaurant'\n    ).add_to(res_m)\n\nres_m\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nschools_points = schools[schools.geometry.type == 'Point']\n\nmap_center = schools_points.geometry.unary_union.centroid\n\nschools_map = folium.Map(location=[map_center.y, map_center.x], zoom_start=14)\n\nfor idx, row in schools_points.iterrows():\n    marker = folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Schools')\n    marker.add_to(schools_map)\n\nschools_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfrom shapely.geometry import Polygon, MultiPolygon\ncommerce_m = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in commercial.iterrows():\n    if isinstance(row.geometry, (Polygon, MultiPolygon)):\n        folium.GeoJson(row.geometry, \n                        popup='Commercial Block',\n                        style_function=lambda x: {'fillColor': 'blue', 'color': 'blue'}\n                       ).add_to(commerce_m)\n\ncommerce_m\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nIn addition to these urban features, the green spaces represented by parks emerged as significant attractors for walkers, offering respite and recreational space amidst the urban fabric. These verdant areas likely contribute to the appeal of walking by enhancing the environmental quality and aesthetic of the city.\n\nparks_map = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, park in parks.iterrows():\n    if isinstance(park.geometry, (Polygon, MultiPolygon)):\n        folium.GeoJson(\n            data=park.geometry.__geo_interface__,\n            popup='Park',\n            style_function=lambda x: {'fillColor': 'green', 'color': 'green'}\n        ).add_to(parks_map)\n\nparks_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOverall, my investigation paints a picture of Center City as a robust hub of pedestrian activity, supported by a well-integrated system of walkways, transit stops, commercial establishments, educational institutions, and green spaces. Each element plays a role in creating an inviting pedestrian environment, showcasing the multifaceted allure of Center City for walkers. The harmonious interplay between these factors not only facilitates but also enriches the pedestrian experience, affirming Center City’s reputation as a vibrant and walkable urban center."
  },
  {
    "objectID": "analysis/Final.html#why-center-city-become-a-pedestrain-busy-zone",
    "href": "analysis/Final.html#why-center-city-become-a-pedestrain-busy-zone",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "4. Why Center City Become a Pedestrain Busy Zone",
    "text": "4. Why Center City Become a Pedestrain Busy Zone\nTo further understand what drives pedestrian movement in Center City, I conducted a regression analysis with the aim of quantifying the influence of various urban features on walking trip counts. Using Python’s scikit-learn library, I fitted a linear regression model with variables including the count of bus stops, metro stops, restaurants, schools, commercial areas, and park areas.\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n\ndistricts_gdf.head()\ncentral = districts_gdf.loc[districts_gdf['DIST_NAME'] == 'Central', 'geometry']\n\n\nphilly_tract.set_crs(epsg=4326, inplace=True)\n\ncentral_gdf = gpd.GeoDataFrame(central)\n\ncentral_gdf.set_crs(philly_tract.crs, inplace=True)\n\ncentral_tracts = gpd.sjoin(philly_tract, central_gdf, how=\"inner\", op='intersects')\n\nD:\\Anaconda\\Install\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\nif 'index_right' in central_tracts.columns:\n    central_tracts = central_tracts.drop(columns=['index_right'])\n\n\nimport geopandas as gpd\n\ndef count_pois(geo_df, tracts_df, poi_name):\n    join = gpd.sjoin(geo_df, tracts_df, predicate='within')\n    count = join.groupby('index_right').size()\n    tracts_df[poi_name] = count.reindex(tracts_df.index, fill_value=0)\n\ndef calculate_area(geo_df, tracts_df, area_name):\n    join = gpd.sjoin(geo_df, tracts_df, predicate='intersects')\n    area = join.groupby('index_right').apply(lambda g: g.geometry.area.sum())\n    tracts_df[area_name] = area.reindex(tracts_df.index, fill_value=0)\n\ncount_pois(bus_stops, central_tracts, 'bus_stop_count')\ncount_pois(metro_stops, central_tracts, 'metro_stop_count')\ncount_pois(restaurant_points, central_tracts, 'restaurant_count')\ncount_pois(schools_points, central_tracts, 'school_count')\ncount_pois(walk_in_central, central_tracts, 'walktrip_count')\n\n\ncalculate_area(commercial, central_tracts, 'commercial_area')\ncalculate_area(parks, central_tracts, 'park_area')\n\ncentral_tracts.reset_index(drop=True, inplace=True)\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1808947791.py:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  area = join.groupby('index_right').apply(lambda g: g.geometry.area.sum())\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1808947791.py:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  area = join.groupby('index_right').apply(lambda g: g.geometry.area.sum())\n\n\n\ncentral_tracts.head()\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\n...\ncentroid\ncentroid_lat\ncentroid_lon\nmetro_stop_count\nrestaurant_count\nschool_count\ncommercial_area\npark_area\nbus_stop_count\nwalktrip_count\n\n\n\n\n0\n42\n101\n980000\n42101980000\n9800\nCensus Tract 9800\nG5020\nS\n8923895\n1501892\n...\nPOINT (-75.20022 39.98506)\n39.985064\n-75.200217\n0\n0\n0\n0.000000e+00\n0.000310\n1\n0\n\n\n1\n42\n101\n036700\n42101036700\n367\nCensus Tract 367\nG5020\nS\n801972\n0\n...\nPOINT (-75.14399 39.96073)\n39.960726\n-75.143987\n1\n2\n0\n1.814250e-06\n0.000003\n0\n18\n\n\n2\n42\n101\n037600\n42101037600\n376\nCensus Tract 376\nG5020\nS\n717301\n0\n...\nPOINT (-75.15516 39.95990)\n39.959902\n-75.155163\n0\n4\n4\n2.725569e-07\n0.000001\n0\n7\n\n\n3\n42\n101\n036900\n42101036900\n369\nCensus Tract 369\nG5020\nS\n1859160\n193283\n...\nPOINT (-75.19370 39.94910)\n39.949097\n-75.193703\n0\n0\n0\n0.000000e+00\n0.000000\n0\n0\n\n\n4\n42\n101\n036600\n42101036600\n366\nCensus Tract 366\nG5020\nS\n1004315\n1426276\n...\nPOINT (-75.13895 39.94486)\n39.944863\n-75.138949\n0\n3\n0\n0.000000e+00\n0.000008\n1\n16\n\n\n\n\n5 rows × 23 columns\n\n\n\nThe correlation heatmap provided initial insights into the relationships between these variables, showing a strong positive correlation between the number of restaurants and walking trips, which aligns with the idea that dining options significantly contribute to pedestrian traffic. A moderate positive correlation was also observed between the number of bus and metro stops and walking trips, supporting the notion that public transit accessibility encourages walking.\n\ntrain_set = central_tracts[['bus_stop_count', 'metro_stop_count', 'restaurant_count', 'school_count', 'commercial_area', 'park_area']]\n\nsns.heatmap(\n    train_set.corr(),\n    cmap=\"coolwarm\",\n    annot=True,\n    vmin=-1,\n    vmax=1\n)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nfrom sklearn.linear_model import LinearRegression\n\nX = central_tracts[['metro_stop_count', 'restaurant_count', 'school_count', 'commercial_area', 'park_area']]\ny = central_tracts['walktrip_count']  \n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\nUpon fitting the linear regression model, the coefficients revealed the relative impact of each feature. The presence of restaurants had a noticeable positive coefficient, suggesting a strong relationship with pedestrian activity. Interestingly, the number of schools had a negative coefficient, which could indicate that the areas around schools in Center City do not necessarily generate additional foot traffic, or other factors may be at play that weren’t captured in the model.\nThe model’s mean squared error (MSE) and coefficient of determination (R²) were evaluated to measure its performance. With an R² value of approximately 0.426, the model explains around 42.6% of the variance in walking trips. While this indicates that the model has captured a significant portion of the factors affecting pedestrian movement, there is still a substantial amount of variance unexplained, which could be due to unmodeled variables or the complexity of pedestrian dynamics that are not easily captured by linear relationships.\n\nprint(f'Coefficients: {model.coef_}')\nprint(f'Intercept: {model.intercept_}')\n\nCoefficients: [ 9.72257383e+00  2.25749357e+01 -1.44216056e+00  1.83764737e+00\n -8.41207906e+05  1.29592761e+04]\nIntercept: 20.57387711612844\n\n\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ny_pred = model.predict(X)\n\nprint(f'Mean squared error (MSE): {mean_squared_error(y, y_pred)}')\nprint(f'Coefficient of determination (R^2): {r2_score(y, y_pred)}')\n\nMean squared error (MSE): 1977.6339251018762\nCoefficient of determination (R^2): 0.42607554891522836\n\n\nIn conclusion, my regression analysis has shed light on some key factors that appear to influence walking trip counts in Center City. While the findings confirm the importance of amenities like restaurants and public transit stops, they also prompt further investigation into other potential influences on pedestrian activity. This model serves as a foundational step towards a more nuanced understanding of urban walkability and the myriad elements that foster an inviting pedestrian environment."
  },
  {
    "objectID": "analysis/Final.html#conclusion-next-step",
    "href": "analysis/Final.html#conclusion-next-step",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "5. Conclusion & Next Step",
    "text": "5. Conclusion & Next Step\nThe findings from this project underscore the intricate relationship between urban design and pedestrian behavior. Center City’s robust network of walkways, transit stops, and commercial and recreational areas not only accommodates but also encourages walking as a primary mode of transportation. My regression analysis, while highlighting the substantial impact of dining options and public transit, also points to the complexity of pedestrian dynamics and the potential for further research. With an R² value reflecting that only a portion of walking trip variance is explained, there’s room to explore additional variables and more sophisticated models. This project has laid the groundwork for a deeper exploration into urban walkability, offering insights that could inform city planners and policymakers seeking to enhance pedestrian experiences in urban landscapes. The conclusion we draw is that while pedestrian movement is influenced by a myriad of factors, the centrality of accessible amenities and a pedestrian-friendly infrastructure cannot be overstated in fostering a vibrant, walkable city. In the next step, I would like to further explore the pedestrain desert, making comparison with the pedestrain busy zone and find out the back reason of lacking of pedestrains in those areas."
  },
  {
    "objectID": "Final.html",
    "href": "Final.html",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "",
    "text": "---\ntitle: \"Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia\"\nformat:\n    html:\n        code-fold: true\n        page-layout: full\nexecute:\n    echo:false\n    code-fold: true\n---\n\n\n  Cell In[1], line 1\n    ---\n       ^\nSyntaxError: invalid syntax\nXiayuanshan Gao"
  },
  {
    "objectID": "Final.html#profiling-the-walking-trips-and-pedestrians-in-philadelphia-in-2012",
    "href": "Final.html#profiling-the-walking-trips-and-pedestrians-in-philadelphia-in-2012",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "1. Profiling the Walking Trips and Pedestrians in Philadelphia in 2012",
    "text": "1. Profiling the Walking Trips and Pedestrians in Philadelphia in 2012\nIn the first section, I delve into the pedestrian dynamics of Philadelphia in 2012, aiming to unpack the walking trip patterns and profile those who most frequently travel by foot. My exploration spans various dimensions, from the origins and destinations of these journeys to the walkers’ socioeconomic characteristics, including income levels, vehicle ownership, gender, age, race, and education. This comprehensive overview not only illuminates the prevalent trends in walking trips but also highlights the diverse tapestry of individuals who opt for pedestrian travel, thereby offering an encompassing snapshot of urban mobility within the city.\n\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport geopandas as gpd\nimport hvplot.pandas\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport datetime\nimport math\nfrom pandana.loaders import osm\nimport folium\n\n\ntrip = pd.read_excel('data/4_Trip_Public.xlsx')\ntrip.head ()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nD_COUNTY\nD_CPA\nD_MCD\nD_TRACT\nD_TAZ\nGPSFactor\nSurvey_TravTime\nModel_TravTime\nModel_TravDist\nCompositeWeight\n\n\n\n\n0\n1\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n1\n...\n34007.0\n007_802\n3.400712e+09\n3.400760e+10\n22228.0\n1.12\n15.0\n7.456654\n1.535654\n148.448239\n\n\n1\n2\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n2\n...\n34007.0\n007_802\n3.400712e+09\n3.400760e+10\n22231.0\n1.12\n7.0\n7.810088\n1.675524\n148.448239\n\n\n2\n3\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n3\n...\n34005.0\n005_702\n3.400544e+09\n3.400570e+10\n20225.0\n1.12\n12.0\n9.363016\n2.301180\n148.448239\n\n\n3\n4\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n4\n...\n34005.0\n005_702\n3.400544e+09\n3.400570e+10\n20227.0\n1.12\n16.0\n6.233144\n1.086251\n148.448239\n\n\n4\n5\n100140\n1\n10014001\n133.460324\n132.54307\n1.0\nNaN\n1.001400e+11\n5\n...\n34005.0\n005_702\n3.400544e+09\n3.400570e+10\n20225.0\n1.12\n10.0\n6.258231\n1.208349\n148.448239\n\n\n\n\n5 rows × 82 columns\n\n\n\n\n# Trim to Phily and bike trip\nwalk = trip[(trip['O_COUNTY'] == 42101) & (trip['MODE_AGG'] == 1)]\n\nwalk.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nD_COUNTY\nD_CPA\nD_MCD\nD_TRACT\nD_TAZ\nGPSFactor\nSurvey_TravTime\nModel_TravTime\nModel_TravDist\nCompositeWeight\n\n\n\n\n12\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n113.0\n1.17\n15.0\n16.783789\n0.867162\n328.937729\n\n\n13\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n44.0\n1.17\n11.0\n12.350352\n0.638102\n328.937729\n\n\n302\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n35.0\n1.13\n9.0\nNaN\nNaN\n246.584019\n\n\n303\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n38.0\n1.13\n10.0\n11.381527\n0.588046\n246.584019\n\n\n991\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n42101.0\n101_103\n4.210160e+09\n4.210100e+10\n55.0\n1.13\n10.0\n16.072276\n0.830401\n93.130844\n\n\n\n\n5 rows × 82 columns\n\n\n\n\n1.1 What Type of Walking Trips Happened in Philadelphia in 2012\nFrom the presented data, it is evident that walking trips in Philadelphia in 2012 were predominantly initiated and concluded at a variety of locations classified under ‘Other’, denoting a diverse range of non-home and non-work-related starting and ending points. This diversity in trip locations correlates with a higher frequency of walking trips associated with home activities that are not related to work, school, or online engagements. Despite the variety in origins and destinations, there is a notable preference for walking trips that end at ‘Home’, suggesting that Philadelphia residents may prefer walking for returning home from various activities. In contrast, walking trips starting from ‘Work’ are less frequent than those ending there, hinting at the possibility that walking is less preferred for commuting to work. The subsequent chart detailing the types of activities associated with walking trips reinforces the inference that non-work-related activities, particularly those centered around the home, are the primary motivators for walking.\nThe first pair of charts compare the frequency of different types of locations from where people start and end their walking trips. The categories include ‘Other’, ‘Work’, ‘Home’, and ‘School’. For origins, the ‘Other’ category has the highest count, indicating that most walking trips begin at locations other than work, home, or school. This is followed by ‘Work’, ‘Home’, and ‘School’ which has the least count. For destinations, ‘Other’ also has the highest count, suggesting that destinations are similarly varied. However, ‘Home’ has a significantly higher count as a destination than as an origin, while ‘Work’ has a lower count as a destination than as an origin. ‘School’ remains the least frequent destination.\n\nreplacement_dict = {1: 'Home', 2: 'Work', 3: 'School', 4: 'Other'}\n\nwalk['O_LOC_TYPE'] = walk['O_LOC_TYPE'].replace(replacement_dict)\nwalk['D_LOC_TYPE'] = walk['D_LOC_TYPE'].replace(replacement_dict)\n\nsns.set_style(\"whitegrid\")\n\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n# Plot Origin Loc Type \nsns.countplot(x='O_LOC_TYPE', data=walk, ax=ax[0])\nax[0].set_title('Frequency of  Origin Loc Type ')\nax[0].set_xlabel('Origin Loc Type ')\nax[0].set_ylabel('Count')\n\n# Plot Destination Loc Type \nsns.countplot(x='D_LOC_TYPE', data=walk, ax=ax[1])\nax[1].set_title('Frequency of Destination Loc Type')\nax[1].set_xlabel('Destination Loc Type')\nax[1].set_ylabel('Count')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1475632616.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['O_LOC_TYPE'] = walk['O_LOC_TYPE'].replace(replacement_dict)\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1475632616.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['D_LOC_TYPE'] = walk['D_LOC_TYPE'].replace(replacement_dict)\n\n\n\n\n\nThe following chart shows the frequency of different types of activities for which walking is used. The most common activity is ‘Home activities not related to work, school, or online’, indicating that walking is most frequently used for local errands or tasks around the house. This is followed by ‘Work for pay’ and ‘Change type of transportation/transfer’. Activities like ‘Social (visit friends, relatives, etc.)’, ‘Medical (medical appointment, medical procedure, etc.)’, and ‘Recreation-watch/observe (movies, concert, sports event, etc.)’ have lower frequencies.\n\n# Find out activity type\nactivity_dict = { 1: 'Home activities not related to work, school, or online',\n                 2: 'Homework, class related assignments or attended an online course',\n                 3: 'Attended classes',\n                 4: 'Attended other school activities (performances, meetings, clubs)',\n                 5: 'Work for pay',\n                 6: 'Personal business (banking or ATM, salon, library)',\n                 7: 'Online personal business (banking, e-mail, etc.)',\n                 8: 'Everyday shopping (grocery, drug store, gas, etc.)',\n                 9: 'Major shopping (appliances, cars, home furnishings, clothes, etc.)',\n                 10: 'Online shopping for products, services or goods',\n                 11: 'Eat out (restaurant, drive-thru, etc.)',\n                 12: 'Social (visit friends, relatives, etc.)',\n                 13: 'Social/community/religious (meetings, worhship, wedding, funeral, etc.)',\n                 14: 'Recreation- active participation (sports, exercise, walk the dog, etc.)',\n                 15: 'Recreation-watch/observe (movies, concert, sports event, etc.)',\n                 16: 'Medical (medical appointment, medical procedure, etc.)',\n                 17: 'Pick up passenger',\n                 18: 'Drop off passenger',\n                 19: 'Change type of transportation/transfer',\n                 20: 'Accompany household member',\n                 96: 'Other activity'}\n\nwalk['ACTIV1'] = walk['ACTIV1'].replace(activity_dict)\n\nplt.figure(figsize=(10, 8))\n\n\nactivity_counts = walk['ACTIV1'].value_counts()\nsns.barplot(y=activity_counts.index, x=activity_counts.values)\nplt.title('Frequency of Walk Activity Type')\nplt.xlabel('Count')\nplt.ylabel('Activity')\n\nfor index, value in enumerate(activity_counts.values):\n    plt.text(value, index, f'{value}')\n\nplt.show()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\28425172.py:24: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['ACTIV1'] = walk['ACTIV1'].replace(activity_dict)\n\n\n\n\n\n\n\n1.2 Who Prefer to Walk\nThen, the following analysis of Philadelphia’s pedestrian demographics in 2012 reveals a nuanced portrait influenced by various socioeconomic factors. The data on total vehicles indicates that individuals with no vehicles in their household are the most likely to walk, which is consistent across all income brackets except for the highest and lowest, where walking is less prevalent. Income distribution among pedestrians shows a fairly even spread, with slight peaks in the middle-income ranges, suggesting that walking is not exclusively linked to any single income level.\nGender distribution shows a modest preference for walking among females compared to males. Age-wise, the 25-74 age group is the most inclined to walk, with a notable peak in the 55-59 bracket, highlighting the potential for walking as a consistent transportation choice across a broad adult age spectrum.\nRacial demographics indicate that White individuals and those identifying as Asian are more represented among walkers than other races, with Black/African American and Hispanic or Latino individuals walking less by comparison. Education level data shows a clear trend: individuals with higher educational attainment, specifically those with a bachelor’s or graduate degree, are more likely to walk than those with lower levels of education or some college credit.\nIn summary, the typical pedestrian in Philadelphia in 2012 would likely be a person without a vehicle in their household, belonging to the middle-income bracket, and leaning slightly towards the female demographic. Age-wise, adults, particularly those between 25 to 74 years old, with a concentration around late 50s, are the most common walkers. A higher educational background correlates positively with the likelihood of walking, while White and Asian residents tend to walk more than other racial groups. These insights draw a picture of pedestrians in Philadelphia as a diverse group with a significant representation among middle-aged, educated individuals, suggesting that walking is a transportation mode that cuts across various socioeconomic layers, albeit with certain demographic tendencies.\n\n# Load other df\nhh = pd.read_excel('data/1_Household_Public.xlsx')\n\nper = pd.read_excel('data/2_Person_Public.xlsx')\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nwalk = walk.merge(hh[['HH_ID', 'TOT_VEH', 'INCOME']], on='HH_ID', how='left')\nwalk = walk.merge(per[['PERSON_ID', 'GEND', 'AGECAT', 'RACE', 'EDUCA']], on='PERSON_ID', how='left')\n\n\n# Create mappings for the variables hh and person \ngend_mapping = {1: 'Male', 2: 'Female', 99: 'Refused'}\nagecat_mapping = {\n    1: '5 or younger', 2: '6 to 12', 3: '13 to 15', 4: '16 to 17', \n    5: '18 to 24', 6: '25 to 34', 7: '35 to 44', 8: '45 to 54', \n    9: '55 to 64', 10: '65 to 74', 11: '75 to 85', 12: '86 and over',\n    98: \"Don't know\", 99: 'Refused'\n}\n\nrace_mapping = {\n    1: 'White/Caucasian', 2: 'Black/African American', 3: 'Hispanic or Latino',\n    4: 'American Indian or Alaska Native', 5: 'Asian', 6: 'Native Hawaiian or Pacific Islander',\n    97: 'Other, Specify', 98: \"Don't Know\", 99: 'Refused', 100: 'Multi-race'\n}\neduca_mapping = {\n    1: 'Not a high school graduate', 2: 'High school graduate', 3: 'Some college credit',\n    4: 'Associate or technical school degree', 5: \"Bachelor's or undergraduate degree\",\n    6: 'Graduate degree', 97: 'Other', 98: \"Don't know\", 99: 'Refused'\n}\nincome_mapping = {\n    1: '$0 to $9,999', 2: '$10,000 to $24,999', 3: '$25,000 to $34,999', 4: '$35,000 to $49,999',\n    5: '$50,000 to $74,999', 6: '$75,000 to $99,999', 7: '$100,000 to $149,999',\n    8: '$150,000 to $199,999', 9: '$200,000 to $249,999', 10: '$250,000 or more',\n    98: \"Don't know\", 99: 'Refused'\n}\n\nwalk['GEND'] = walk['GEND'].map(gend_mapping)\nwalk['AGECAT'] = walk['AGECAT'].map(agecat_mapping)\nwalk['RACE'] = walk['RACE'].map(race_mapping)\nwalk['EDUCA'] = walk['EDUCA'].map(educa_mapping)\nwalk['INCOME'] = walk['INCOME'].map(income_mapping)\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))  \n\nwalk['TOT_VEH'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 0], title='Total Vehicles')\nwalk['INCOME'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 1], title='Income')\nwalk['GEND'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 2], title='Gender')\nwalk['AGECAT'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 0], title='Age Category')\nwalk['RACE'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 1], title='Race')\nwalk['EDUCA'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 2], title='Education')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nIn conclusion, the multifaceted examination of walking trips in Philadelphia in 2012 reveals that walking is a mode of transportation embraced across a spectrum of socioeconomic backgrounds, with particular tendencies shaped by the absence of vehicles, middle-income brackets, and higher educational attainments. Notably, the proclivity to walk is slightly more common among females and notably prevalent in the 25-74 age demographic, with a surprising peak among those in their late fifties. Additionally, while White and Asian residents are more represented among pedestrians, the data indicates that walking is a universally adopted practice with a presence in every income category and demographic segment. These findings reflect the inherent complexity of pedestrian movement patterns and suggest that walking, as an integral element of urban life, is influenced by a confluence of personal, economic, and cultural factors that define the pedestrian landscape of Philadelphia."
  },
  {
    "objectID": "Final.html#where-do-people-walk-in-philadelphia-in-2012",
    "href": "Final.html#where-do-people-walk-in-philadelphia-in-2012",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "2. Where Do People Walk in Philadelphia in 2012",
    "text": "2. Where Do People Walk in Philadelphia in 2012\nIn the second section of my analysis, I turn my focus to the spatial dynamics of pedestrian movement within Philadelphia, unraveling the patterns of where residents choose to walk. Through a series of flow maps and heat maps, I discern the urban fabric’s influence on pedestrian behavior. The central district emerges as the epicenter of pedestrian activity, with a vibrant flux of walkers traversing its streets, likely due to commercial, cultural, and civic amenities. Adjacent areas such as the lower north, south, University southwest, and west districts also exhibit significant pedestrian traffic, albeit less densely clustered than the central district. In stark contrast, the lower southwest and lower south districts present as pedestrian deserts, areas where foot traffic is markedly sparse. These regions may lack pedestrian-friendly infrastructure or destinations that encourage walking. The overlaid heat maps, distinguishing between origins and destinations, further underscore these patterns, revealing hotspots of pedestrian origination and culmination. When combined, these visual tools paint a detailed picture of walking patterns across the city, highlighting areas of high pedestrian engagement and pinpointing zones that could benefit from urban design interventions to enhance walkability and connectivity.\n\n# load Census Tract\n\nimport pygris\n\npa_state_code = '42' \nphilly_county_code = '101'\n\nphilly_tract = pygris.tracts(state=pa_state_code, county=philly_county_code, year=2012)\n\nphilly_tract.head(5)\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\nINTPTLAT\nINTPTLON\ngeometry\n\n\n\n\n1783\n42\n101\n038100\n42101038100\n381\nCensus Tract 381\nG5020\nS\n3335030\n1629584\n+40.0189334\n-075.0399564\nPOLYGON ((-75.06785 40.01121, -75.06752 40.011...\n\n\n1784\n42\n101\n038400\n42101038400\n384\nCensus Tract 384\nG5020\nS\n2546786\n0\n+40.0714163\n-075.2332568\nPOLYGON ((-75.24321 40.07356, -75.24313 40.073...\n\n\n1785\n42\n101\n038600\n42101038600\n386\nCensus Tract 386\nG5020\nS\n3304398\n32066\n+40.0582762\n-075.2110913\nPOLYGON ((-75.22199 40.07306, -75.22128 40.073...\n\n\n1786\n42\n101\n038500\n42101038500\n385\nCensus Tract 385\nG5020\nS\n1338942\n2576\n+40.0757528\n-075.2146234\nPOLYGON ((-75.22784 40.08423, -75.22774 40.084...\n\n\n1787\n42\n101\n038700\n42101038700\n387\nCensus Tract 387\nG5020\nS\n2053212\n22241\n+40.0833122\n-075.2130770\nPOLYGON ((-75.22977 40.08676, -75.22961 40.086...\n\n\n\n\n\n\n\n\nphilly_tract = philly_tract.to_crs(epsg=4326)\n\n# Calculate the centroid points in geographic coordinates\nphilly_tract['centroid'] = philly_tract.geometry.centroid\nphilly_tract['centroid_lat'] = philly_tract.centroid.y\nphilly_tract['centroid_lon'] = philly_tract.centroid.x\n\nphilly_tract.head()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\3754762874.py:4: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  philly_tract['centroid'] = philly_tract.geometry.centroid\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\3754762874.py:5: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  philly_tract['centroid_lat'] = philly_tract.centroid.y\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\3754762874.py:6: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  philly_tract['centroid_lon'] = philly_tract.centroid.x\n\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\nINTPTLAT\nINTPTLON\ngeometry\ncentroid\ncentroid_lat\ncentroid_lon\n\n\n\n\n1783\n42\n101\n038100\n42101038100\n381\nCensus Tract 381\nG5020\nS\n3335030\n1629584\n+40.0189334\n-075.0399564\nPOLYGON ((-75.06785 40.01121, -75.06752 40.011...\nPOINT (-75.03963 40.01770)\n40.017698\n-75.039634\n\n\n1784\n42\n101\n038400\n42101038400\n384\nCensus Tract 384\nG5020\nS\n2546786\n0\n+40.0714163\n-075.2332568\nPOLYGON ((-75.24321 40.07356, -75.24313 40.073...\nPOINT (-75.23326 40.07142)\n40.071418\n-75.233255\n\n\n1785\n42\n101\n038600\n42101038600\n386\nCensus Tract 386\nG5020\nS\n3304398\n32066\n+40.0582762\n-075.2110913\nPOLYGON ((-75.22199 40.07306, -75.22128 40.073...\nPOINT (-75.21027 40.05805)\n40.058053\n-75.210272\n\n\n1786\n42\n101\n038500\n42101038500\n385\nCensus Tract 385\nG5020\nS\n1338942\n2576\n+40.0757528\n-075.2146234\nPOLYGON ((-75.22784 40.08423, -75.22773 40.084...\nPOINT (-75.21369 40.07591)\n40.075907\n-75.213688\n\n\n1787\n42\n101\n038700\n42101038700\n387\nCensus Tract 387\nG5020\nS\n2053212\n22241\n+40.0833122\n-075.2130770\nPOLYGON ((-75.22977 40.08676, -75.22961 40.086...\nPOINT (-75.21434 40.08330)\n40.083299\n-75.214342\n\n\n\n\n\n\n\n\nphilly_tract['TRACTCE'] = philly_tract['TRACTCE'].astype(str)\n\nwalk['O_TRACT'] = walk['O_TRACT'].astype(str)\nwalk['D_TRACT'] = walk['D_TRACT'].astype(str)\n\n# only keep the strings for tract\nwalk['O_TRACT'] = walk['O_TRACT'].str[5:11]\nwalk['D_TRACT'] = walk['D_TRACT'].str[5:11]\n\nwalk.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nSurvey_TravTime\nModel_TravTime\nModel_TravDist\nCompositeWeight\nTOT_VEH\nINCOME\nGEND\nAGECAT\nRACE\nEDUCA\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n15.0\n16.783789\n0.867162\n328.937729\n2\n$50,000 to $74,999\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n11.0\n12.350352\n0.638102\n328.937729\n2\n$50,000 to $74,999\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n9.0\nNaN\nNaN\n246.584019\n2\nRefused\nMale\n35 to 44\nNaN\nGraduate degree\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n10.0\n11.381527\n0.588046\n246.584019\n2\nRefused\nMale\n35 to 44\nNaN\nGraduate degree\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n10.0\n16.072276\n0.830401\n93.130844\n2\nRefused\nFemale\n65 to 74\nNaN\nGraduate degree\n\n\n\n\n5 rows × 88 columns\n\n\n\n\n\n# Merge latitude and longitude for origins\nwalk = walk.merge(\n    philly_tract[['TRACTCE', 'centroid_lat', 'centroid_lon']].rename(\n        columns={'centroid_lat': 'origin_lat', 'centroid_lon': 'origin_lon','TRACTCE': 'origin_tra'}\n    ),\n    how='left', left_on='O_TRACT', right_on='origin_tra'\n)\n\n# Merge latitude and longitude for destinations\nwalk = walk.merge(\n    philly_tract[['TRACTCE', 'centroid_lat', 'centroid_lon']].rename(\n        columns={'centroid_lat': 'destination_lat', 'centroid_lon': 'destination_lon','TRACTCE': 'destination_tra'}\n    ),\n    how='left', left_on='D_TRACT', right_on='destination_tra'\n)\n\n\nwalk.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nGEND\nAGECAT\nRACE\nEDUCA\norigin_tra\norigin_lat\norigin_lon\ndestination_tra\ndestination_lat\ndestination_lon\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000804\n39.948566\n-75.167755\n000300\n39.957150\n-75.171232\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\nMale\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000300\n39.957150\n-75.171232\n000804\n39.948566\n-75.167755\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\nMale\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n001002\n39.945006\n-75.146618\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\nMale\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n000902\n39.947161\n-75.156637\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\nFemale\n65 to 74\nNaN\nGraduate degree\n000500\n39.951955\n-75.158176\n000600\n39.949386\n-75.158334\n\n\n\n\n5 rows × 94 columns\n\n\n\n\nimport folium\n\naverage_lat = walk[['origin_lat', 'destination_lat']].stack().mean()\naverage_lon = walk[['origin_lon', 'destination_lon']].stack().mean()\n\nod = folium.Map(location=[average_lat, average_lon], zoom_start=12,\n    tiles='CartoDB positron')\n\nfor idx, row in walk.iterrows():\n    if pd.notnull(row['origin_lat']) and pd.notnull(row['origin_lon']):\n        folium.CircleMarker(\n            location=[row['origin_lat'], row['origin_lon']],\n            radius=3,\n            color='skyblue',\n            fill=True,\n            fill_color='skyblue'\n        ).add_to(od)\n\n    if pd.notnull(row['destination_lat']) and pd.notnull(row['destination_lon']):\n        folium.CircleMarker(\n            location=[row['destination_lat'], row['destination_lon']],\n            radius=3,\n            color='pink',\n            fill=True,\n            fill_color='pink'\n        ).add_to(od)\n    \n    if pd.notnull(row['origin_lat']) and pd.notnull(row['origin_lon']) and \\\n       pd.notnull(row['destination_lat']) and pd.notnull(row['destination_lon']):\n        folium.PolyLine(\n            locations=[\n                [row['origin_lat'], row['origin_lon']],\n                [row['destination_lat'], row['destination_lon']]\n            ],\n            color='lavender',\n            weight=1\n        ).add_to(od)\n\nod\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# Load the district boundaries file\ndistricts_gdf = gpd.read_file('data/Planning_Districts.geojson')\n\ndistricts_gdf = districts_gdf.to_crs(epsg=4326)\n\n\n# plot the heatmap with origin\nfrom folium.plugins import HeatMap\n\nheatmap_data = walk[['origin_lat', 'origin_lon']].dropna().values.tolist()\n\no_des = folium.Map(location=[average_lat, average_lon], zoom_start=12, tiles='CartoDB positron')\n\nHeatMap(heatmap_data).add_to(o_des)\n\nfor _, row in districts_gdf.iterrows():\n    sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'transparent', 'color': 'black'})\n    geo_j.add_to(o_des)\n\no_des\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\n# plot the heatmap with origin\nfrom folium.plugins import HeatMap\n\nheatmap_data2 = walk[['destination_lat', 'destination_lon']].dropna().values.tolist()\n\nd_des = folium.Map(location=[average_lat, average_lon], zoom_start=12, tiles='CartoDB positron')\n\nHeatMap(heatmap_data2).add_to(d_des)\n\nfor _, row in districts_gdf.iterrows():\n    sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'transparent', 'color': 'black'})\n    geo_j.add_to(d_des)\n\nd_des\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfrom folium.plugins import HeatMap\n\n# Assuming walk['origin_lat'] and walk['origin_lon'] are the coordinates for origins\nheatmap_data_origins = walk[['origin_lat', 'origin_lon']].dropna().values.tolist()\n\n# Assuming walk['destination_lat'] and walk['destination_lon'] are the coordinates for destinations\nheatmap_data_destinations = walk[['destination_lat', 'destination_lon']].dropna().values.tolist()\n\n# Create a Folium map centered around the average coordinates\nheat_combined = folium.Map(location=[average_lat, average_lon], zoom_start=12, tiles='CartoDB positron')\n\n# Add the origin heatmap layer with one color gradient\nHeatMap(heatmap_data_origins, radius=7, blur=15, gradient={0.2: 'blue', 0.4: 'cyan', 0.6: 'lime', 0.8: 'yellow'}).add_to(heat_combined)\n\n# Add the destination heatmap layer with another color gradient\nHeatMap(heatmap_data_destinations, radius=7, blur=15, gradient={0.2: 'purple', 0.4: 'violet', 0.6: 'magenta', 0.8: 'pink'}).add_to(heat_combined)\n\n# Overlay the district boundaries\nfor _, row in districts_gdf.iterrows():\n    sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)\n    geo_j = sim_geo.to_json()\n    geo_j = folium.GeoJson(data=geo_j,\n                           style_function=lambda x: {'fillColor': 'transparent', 'color': 'black', 'weight': 1})\n    geo_j.add_to(heat_combined)\n    \n\nheat_combined\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "Final.html#explore-center-city-as-the-pedestrain-busy-district",
    "href": "Final.html#explore-center-city-as-the-pedestrain-busy-district",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "3. Explore Center City as the Pedestrain Busy District",
    "text": "3. Explore Center City as the Pedestrain Busy District\n\n3.1 Why and Who Walk in Center City\nAfter uncovering the pedestrain busy district of center city, here in this section, I specifically examined the walk trips and pedestrains in center city.\nIn my exploration of pedestrian activities within Philadelphia’s central district, I identified distinctive patterns of movement. The data indicated a high frequency of ‘transfer’ activities, which suggests that the central district serves not only as a destination but also as a pivotal hub for pedestrian movement through the city. This is reflective of the dense network of public transit and the district’s role as a connector for various parts of the city. Among other prominent activities, ‘work for pay’ and ‘eat out (restaurant, drive-thru, etc.)’ were also significant, highlighting the central district’s commercial and social importance. Surprisingly, ‘home activities’ were the most frequent type of walk, which may be attributed to the residential pockets within the central district or the tendency of individuals to categorize errands close to home as ‘home activities’.\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\n# filter out the walk trip in the central district\n\nwalk_gdf = gpd.GeoDataFrame(walk, geometry=gpd.points_from_xy(walk.origin_lon, walk.origin_lat))\n\nwalk_gdf.crs = districts_gdf.crs\n\ncentral_polygon = districts_gdf.loc[districts_gdf['DIST_NAME'] == 'Central', 'geometry'].squeeze()\n\nwalk_in_central = walk_gdf[walk_gdf.geometry.within(central_polygon)]\n\nwalk_in_central.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nAGECAT\nRACE\nEDUCA\norigin_tra\norigin_lat\norigin_lon\ndestination_tra\ndestination_lat\ndestination_lon\ngeometry\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000804\n39.948566\n-75.167755\n000300\n39.957150\n-75.171232\nPOINT (-75.16775 39.94857)\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000300\n39.957150\n-75.171232\n000804\n39.948566\n-75.167755\nPOINT (-75.17123 39.95715)\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n001002\n39.945006\n-75.146618\nPOINT (-75.14662 39.94501)\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n000902\n39.947161\n-75.156637\nPOINT (-75.14662 39.94501)\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n65 to 74\nNaN\nGraduate degree\n000500\n39.951955\n-75.158176\n000600\n39.949386\n-75.158334\nPOINT (-75.15818 39.95195)\n\n\n\n\n5 rows × 95 columns\n\n\n\n\nactivity_mapping = { 1: 'Home activities not related to work, school, or online',\n                 2: 'Homework, class related assignments or attended an online course',\n                 3: 'Attended classes',\n                 4: 'Attended other school activities (performances, meetings, clubs)',\n                 5: 'Work for pay',\n                 6: 'Personal business (banking or ATM, salon, library)',\n                 7: 'Online personal business (banking, e-mail, etc.)',\n                 8: 'Everyday shopping (grocery, drug store, gas, etc.)',\n                 9: 'Major shopping (appliances, cars, home furnishings, clothes, etc.)',\n                 10: 'Online shopping for products, services or goods',\n                 11: 'Eat out (restaurant, drive-thru, etc.)',\n                 12: 'Social (visit friends, relatives, etc.)',\n                 13: 'Social/community/religious (meetings, worhship, wedding, funeral, etc.)',\n                 14: 'Recreation- active participation (sports, exercise, walk the dog, etc.)',\n                 15: 'Recreation-watch/observe (movies, concert, sports event, etc.)',\n                 16: 'Medical (medical appointment, medical procedure, etc.)',\n                 17: 'Pick up passenger',\n                 18: 'Drop off passenger',\n                 19: 'Change type of transportation/transfer',\n                 20: 'Accompany household member',\n                 96: 'Other activity'}\n\nwalk_in_central['ACTIV1'] = walk_in_central['ACTIV1'].map(activity_mapping)\n\n# Plotting\nplt.figure(figsize=(10, 8)) \nactivity_counts = walk_in_central['ACTIV1'].value_counts()\n\n\nordered_activities = activity_counts.reindex(activity_mapping.values())\n\n\nordered_activities.plot(kind='bar')\n\nplt.title('Frequency of Walk Activity Type')\nplt.xlabel('Activity')\nplt.ylabel('Count')\n\n\nplt.xticks(rotation=90) \n\n\nfor index, value in enumerate(ordered_activities.values):\n    plt.text(index, value, f'{value}') \n\nplt.tight_layout() \nplt.show()\n\nD:\\Anaconda\\Install\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\n\n\n\n\n\nUpon reprofiling the pedestrian demographic within the central district, I found that the socioeconomic characteristics closely mirrored those observed citywide. Vehicle ownership, income, age, race, gender, and education level demonstrated similar trends, with no significant deviations. This lack of disparity suggests a consistent pedestrian demographic across the city, irrespective of the more intense walking activity in the central district. Most walkers belonged to households without a vehicle, spanned across a diverse range of income levels, and were predominantly White/Caucasian with at least a graduate degree, reflecting the broader city’s pedestrian profile. However, it was interesting to note that the central district’s pedestrian population was just as diverse as the rest of Philadelphia, reinforcing the notion that walking as a mode of transport transcends socioeconomic boundaries within urban centers.\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))  \n\nwalk_in_central['TOT_VEH'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 0], title='Total Vehicles')\nwalk_in_central['INCOME'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 1], title='Income')\nwalk_in_central['GEND'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 2], title='Gender')\nwalk_in_central['AGECAT'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 0], title='Age Category')\nwalk_in_central['RACE'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 1], title='Race')\nwalk_in_central['EDUCA'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 2], title='Education')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n3.2 What are There in Center City Attracting People to Walk Here\nIn the latter half of my analysis of Center City, I delved into the urban elements that contribute to its high pedestrian traffic. I used OpenStreetMap to overlay various components of the urban environment, revealing a dense and intricate web of walkways that form the backbone of pedestrian movement in the area. My mapping highlighted an extensive network of roads frequented by pedestrians, which are well-serviced by an array of public transit options, including numerous bus stops and metro stations strategically located throughout the district.\nThe presence of these amenities suggests a cityscape thoughtfully designed to encourage walking, where the convenience of public transport complements pedestrian pathways. Moreover, my data visualizations pinpointed clusters of restaurants, schools, and commercial blocks, which serve as vital nodes of activity, drawing people onto the streets. These commercial hubs are not only destinations but also waypoints that enliven the pedestrian experience with their vibrancy and accessibility.\n\nimport osmnx as ox\nox.config(use_cache=True, log_console=True)\n\n# For bus stops\nbus_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'highway': 'bus_stop'})\n\n# For metro stops \nmetro_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'railway': 'station'})\n\n# For restaurants\nrestaurants = ox.geometries_from_place('Center City,Philadelphia, PA', tags={\"amenity\": [\"pub\", \"bar\", \"restaurant\"]})\n\n# For schools\nschools = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'amenity': 'school'})\n\n# For commercial blocks\ncommercial = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'landuse': 'commercial'})\n\n# For parks\nparks = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'leisure': 'park'})\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:2: UserWarning: The `utils.config` function is deprecated and will be removed in a future release. Instead, use the `settings` module directly to configure a global setting's value. For example, `ox.settings.log_console=True`.\n  ox.config(use_cache=True, log_console=True)\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:5: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  bus_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'highway': 'bus_stop'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:8: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  metro_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'railway': 'station'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:11: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  restaurants = ox.geometries_from_place('Center City,Philadelphia, PA', tags={\"amenity\": [\"pub\", \"bar\", \"restaurant\"]})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:14: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  schools = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'amenity': 'school'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:17: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  commercial = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'landuse': 'commercial'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:20: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  parks = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'leisure': 'park'})\n\n\n\n# the \"walk\" network\nG = ox.graph_from_address(\"Center City, Philadelphia, PA\", network_type=\"walk\")\nox.plot_graph(ox.project_graph(G), node_size=0)\n\n\n\n\n(&lt;Figure size 800x800 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n\nG_cc = ox.graph_from_polygon(central_polygon, network_type=\"walk\")\n\n# only get the edges\ncc_edges = ox.graph_to_gdfs(G_cc, edges=True, nodes=False)\n\n# add the neighborhood boundaries\nboundary = gpd.GeoSeries([central_polygon], crs=\"EPSG:4326\")\n\ncc_edges.explore(tiles='cartodb positron')\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport geopandas as gpd\n\ncentroid = central_polygon.centroid\ncentral_point = centroid\n\nlongitude = central_point.x\nlatitude = central_point.y\n\n\nimport folium\n\nbus = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in bus_stops.iterrows():\n    folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Bus Stop').add_to(bus)\n\nbus\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nmetro = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in metro_stops.iterrows():\n    folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Metro Stops').add_to(metro)\n\nmetro\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nrestaurant_points = restaurants[restaurants.geometry.type == 'Point']\n\nmap_center = restaurant_points.geometry.unary_union.centroid\n\nres_m = folium.Map(location=[map_center.y, map_center.x], zoom_start=14)\n\nfor idx, row in restaurant_points.iterrows():\n    folium.Marker(\n        location=[row.geometry.y, row.geometry.x], \n        popup='Restaurant'\n    ).add_to(res_m)\n\nres_m\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nschools_points = schools[schools.geometry.type == 'Point']\n\nmap_center = schools_points.geometry.unary_union.centroid\n\nschools_map = folium.Map(location=[map_center.y, map_center.x], zoom_start=14)\n\nfor idx, row in schools_points.iterrows():\n    marker = folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Schools')\n    marker.add_to(schools_map)\n\nschools_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfrom shapely.geometry import Polygon, MultiPolygon\ncommerce_m = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in commercial.iterrows():\n    if isinstance(row.geometry, (Polygon, MultiPolygon)):\n        folium.GeoJson(row.geometry, \n                        popup='Commercial Block',\n                        style_function=lambda x: {'fillColor': 'blue', 'color': 'blue'}\n                       ).add_to(commerce_m)\n\ncommerce_m\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nIn addition to these urban features, the green spaces represented by parks emerged as significant attractors for walkers, offering respite and recreational space amidst the urban fabric. These verdant areas likely contribute to the appeal of walking by enhancing the environmental quality and aesthetic of the city.\n\nparks_map = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, park in parks.iterrows():\n    if isinstance(park.geometry, (Polygon, MultiPolygon)):\n        folium.GeoJson(\n            data=park.geometry.__geo_interface__,\n            popup='Park',\n            style_function=lambda x: {'fillColor': 'green', 'color': 'green'}\n        ).add_to(parks_map)\n\nparks_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOverall, my investigation paints a picture of Center City as a robust hub of pedestrian activity, supported by a well-integrated system of walkways, transit stops, commercial establishments, educational institutions, and green spaces. Each element plays a role in creating an inviting pedestrian environment, showcasing the multifaceted allure of Center City for walkers. The harmonious interplay between these factors not only facilitates but also enriches the pedestrian experience, affirming Center City’s reputation as a vibrant and walkable urban center."
  },
  {
    "objectID": "Final.html#why-center-city-become-a-pedestrain-busy-zone",
    "href": "Final.html#why-center-city-become-a-pedestrain-busy-zone",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "4. Why Center City Become a Pedestrain Busy Zone",
    "text": "4. Why Center City Become a Pedestrain Busy Zone\nTo further understand what drives pedestrian movement in Center City, I conducted a regression analysis with the aim of quantifying the influence of various urban features on walking trip counts. Using Python’s scikit-learn library, I fitted a linear regression model with variables including the count of bus stops, metro stops, restaurants, schools, commercial areas, and park areas.\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n\ndistricts_gdf.head()\ncentral = districts_gdf.loc[districts_gdf['DIST_NAME'] == 'Central', 'geometry']\n\n\nphilly_tract.set_crs(epsg=4326, inplace=True)\n\ncentral_gdf = gpd.GeoDataFrame(central)\n\ncentral_gdf.set_crs(philly_tract.crs, inplace=True)\n\ncentral_tracts = gpd.sjoin(philly_tract, central_gdf, how=\"inner\", op='intersects')\n\nD:\\Anaconda\\Install\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\nif 'index_right' in central_tracts.columns:\n    central_tracts = central_tracts.drop(columns=['index_right'])\n\n\nimport geopandas as gpd\n\ndef count_pois(geo_df, tracts_df, poi_name):\n    join = gpd.sjoin(geo_df, tracts_df, predicate='within')\n    count = join.groupby('index_right').size()\n    tracts_df[poi_name] = count.reindex(tracts_df.index, fill_value=0)\n\ndef calculate_area(geo_df, tracts_df, area_name):\n    join = gpd.sjoin(geo_df, tracts_df, predicate='intersects')\n    area = join.groupby('index_right').apply(lambda g: g.geometry.area.sum())\n    tracts_df[area_name] = area.reindex(tracts_df.index, fill_value=0)\n\ncount_pois(bus_stops, central_tracts, 'bus_stop_count')\ncount_pois(metro_stops, central_tracts, 'metro_stop_count')\ncount_pois(restaurant_points, central_tracts, 'restaurant_count')\ncount_pois(schools_points, central_tracts, 'school_count')\ncount_pois(walk_in_central, central_tracts, 'walktrip_count')\n\n\ncalculate_area(commercial, central_tracts, 'commercial_area')\ncalculate_area(parks, central_tracts, 'park_area')\n\ncentral_tracts.reset_index(drop=True, inplace=True)\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1808947791.py:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  area = join.groupby('index_right').apply(lambda g: g.geometry.area.sum())\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1808947791.py:10: UserWarning: Geometry is in a geographic CRS. Results from 'area' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  area = join.groupby('index_right').apply(lambda g: g.geometry.area.sum())\n\n\n\ncentral_tracts.head()\n\n\n\n\n\n\n\n\nSTATEFP\nCOUNTYFP\nTRACTCE\nGEOID\nNAME\nNAMELSAD\nMTFCC\nFUNCSTAT\nALAND\nAWATER\n...\ncentroid\ncentroid_lat\ncentroid_lon\nmetro_stop_count\nrestaurant_count\nschool_count\ncommercial_area\npark_area\nbus_stop_count\nwalktrip_count\n\n\n\n\n0\n42\n101\n980000\n42101980000\n9800\nCensus Tract 9800\nG5020\nS\n8923895\n1501892\n...\nPOINT (-75.20022 39.98506)\n39.985064\n-75.200217\n0\n0\n0\n0.000000e+00\n0.000310\n1\n0\n\n\n1\n42\n101\n036700\n42101036700\n367\nCensus Tract 367\nG5020\nS\n801972\n0\n...\nPOINT (-75.14399 39.96073)\n39.960726\n-75.143987\n1\n2\n0\n1.814250e-06\n0.000003\n0\n18\n\n\n2\n42\n101\n037600\n42101037600\n376\nCensus Tract 376\nG5020\nS\n717301\n0\n...\nPOINT (-75.15516 39.95990)\n39.959902\n-75.155163\n0\n4\n4\n2.725569e-07\n0.000001\n0\n7\n\n\n3\n42\n101\n036900\n42101036900\n369\nCensus Tract 369\nG5020\nS\n1859160\n193283\n...\nPOINT (-75.19370 39.94910)\n39.949097\n-75.193703\n0\n0\n0\n0.000000e+00\n0.000000\n0\n0\n\n\n4\n42\n101\n036600\n42101036600\n366\nCensus Tract 366\nG5020\nS\n1004315\n1426276\n...\nPOINT (-75.13895 39.94486)\n39.944863\n-75.138949\n0\n3\n0\n0.000000e+00\n0.000008\n1\n16\n\n\n\n\n5 rows × 23 columns\n\n\n\nThe correlation heatmap provided initial insights into the relationships between these variables, showing a strong positive correlation between the number of restaurants and walking trips, which aligns with the idea that dining options significantly contribute to pedestrian traffic. A moderate positive correlation was also observed between the number of bus and metro stops and walking trips, supporting the notion that public transit accessibility encourages walking.\n\ntrain_set = central_tracts[['bus_stop_count', 'metro_stop_count', 'restaurant_count', 'school_count', 'commercial_area', 'park_area']]\n\nsns.heatmap(\n    train_set.corr(),\n    cmap=\"coolwarm\",\n    annot=True,\n    vmin=-1,\n    vmax=1\n)\n\n&lt;Axes: &gt;\n\n\n\n\n\n\nfrom sklearn.linear_model import LinearRegression\n\nX = central_tracts[['metro_stop_count', 'restaurant_count', 'school_count', 'commercial_area', 'park_area']]\ny = central_tracts['walktrip_count']  \n\nmodel = LinearRegression()\nmodel.fit(X, y)\n\nLinearRegression()In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.LinearRegressionLinearRegression()\n\n\nUpon fitting the linear regression model, the coefficients revealed the relative impact of each feature. The presence of restaurants had a noticeable positive coefficient, suggesting a strong relationship with pedestrian activity. Interestingly, the number of schools had a negative coefficient, which could indicate that the areas around schools in Center City do not necessarily generate additional foot traffic, or other factors may be at play that weren’t captured in the model.\nThe model’s mean squared error (MSE) and coefficient of determination (R²) were evaluated to measure its performance. With an R² value of approximately 0.426, the model explains around 42.6% of the variance in walking trips. While this indicates that the model has captured a significant portion of the factors affecting pedestrian movement, there is still a substantial amount of variance unexplained, which could be due to unmodeled variables or the complexity of pedestrian dynamics that are not easily captured by linear relationships.\n\nprint(f'Coefficients: {model.coef_}')\nprint(f'Intercept: {model.intercept_}')\n\nCoefficients: [ 9.72257383e+00  2.25749357e+01 -1.44216056e+00  1.83764737e+00\n -8.41207906e+05  1.29592761e+04]\nIntercept: 20.57387711612844\n\n\n\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ny_pred = model.predict(X)\n\nprint(f'Mean squared error (MSE): {mean_squared_error(y, y_pred)}')\nprint(f'Coefficient of determination (R^2): {r2_score(y, y_pred)}')\n\nMean squared error (MSE): 1977.6339251018762\nCoefficient of determination (R^2): 0.42607554891522836\n\n\nIn conclusion, my regression analysis has shed light on some key factors that appear to influence walking trip counts in Center City. While the findings confirm the importance of amenities like restaurants and public transit stops, they also prompt further investigation into other potential influences on pedestrian activity. This model serves as a foundational step towards a more nuanced understanding of urban walkability and the myriad elements that foster an inviting pedestrian environment."
  },
  {
    "objectID": "Final.html#conclusion-next-step",
    "href": "Final.html#conclusion-next-step",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "5. Conclusion & Next Step",
    "text": "5. Conclusion & Next Step\nThe findings from this project underscore the intricate relationship between urban design and pedestrian behavior. Center City’s robust network of walkways, transit stops, and commercial and recreational areas not only accommodates but also encourages walking as a primary mode of transportation. My regression analysis, while highlighting the substantial impact of dining options and public transit, also points to the complexity of pedestrian dynamics and the potential for further research. With an R² value reflecting that only a portion of walking trip variance is explained, there’s room to explore additional variables and more sophisticated models. This project has laid the groundwork for a deeper exploration into urban walkability, offering insights that could inform city planners and policymakers seeking to enhance pedestrian experiences in urban landscapes. The conclusion we draw is that while pedestrian movement is influenced by a myriad of factors, the centrality of accessible amenities and a pedestrian-friendly infrastructure cannot be overstated in fostering a vibrant, walkable city. In the next step, I would like to further explore the pedestrain desert, making comparison with the pedestrain busy zone and find out the back reason of lacking of pedestrains in those areas."
  },
  {
    "objectID": "Final.html#what-type-of-walking-trips-happened-in-philadelphia-in-2012",
    "href": "Final.html#what-type-of-walking-trips-happened-in-philadelphia-in-2012",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "1.1 What Type of Walking Trips Happened in Philadelphia in 2012",
    "text": "1.1 What Type of Walking Trips Happened in Philadelphia in 2012\nFrom the presented data, it is evident that walking trips in Philadelphia in 2012 were predominantly initiated and concluded at a variety of locations classified under ‘Other’, denoting a diverse range of non-home and non-work-related starting and ending points. This diversity in trip locations correlates with a higher frequency of walking trips associated with home activities that are not related to work, school, or online engagements. Despite the variety in origins and destinations, there is a notable preference for walking trips that end at ‘Home’, suggesting that Philadelphia residents may prefer walking for returning home from various activities. In contrast, walking trips starting from ‘Work’ are less frequent than those ending there, hinting at the possibility that walking is less preferred for commuting to work. The subsequent chart detailing the types of activities associated with walking trips reinforces the inference that non-work-related activities, particularly those centered around the home, are the primary motivators for walking.\nThe first pair of charts compare the frequency of different types of locations from where people start and end their walking trips. The categories include ‘Other’, ‘Work’, ‘Home’, and ‘School’. For origins, the ‘Other’ category has the highest count, indicating that most walking trips begin at locations other than work, home, or school. This is followed by ‘Work’, ‘Home’, and ‘School’ which has the least count. For destinations, ‘Other’ also has the highest count, suggesting that destinations are similarly varied. However, ‘Home’ has a significantly higher count as a destination than as an origin, while ‘Work’ has a lower count as a destination than as an origin. ‘School’ remains the least frequent destination.\n\nreplacement_dict = {1: 'Home', 2: 'Work', 3: 'School', 4: 'Other'}\n\nwalk['O_LOC_TYPE'] = walk['O_LOC_TYPE'].replace(replacement_dict)\nwalk['D_LOC_TYPE'] = walk['D_LOC_TYPE'].replace(replacement_dict)\n\nsns.set_style(\"whitegrid\")\n\nfig, ax = plt.subplots(1, 2, figsize=(12, 6))\n\n# Plot Origin Loc Type \nsns.countplot(x='O_LOC_TYPE', data=walk, ax=ax[0])\nax[0].set_title('Frequency of  Origin Loc Type ')\nax[0].set_xlabel('Origin Loc Type ')\nax[0].set_ylabel('Count')\n\n# Plot Destination Loc Type \nsns.countplot(x='D_LOC_TYPE', data=walk, ax=ax[1])\nax[1].set_title('Frequency of Destination Loc Type')\nax[1].set_xlabel('Destination Loc Type')\nax[1].set_ylabel('Count')\n\n# Show the plot\nplt.tight_layout()\nplt.show()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1475632616.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['O_LOC_TYPE'] = walk['O_LOC_TYPE'].replace(replacement_dict)\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\1475632616.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['D_LOC_TYPE'] = walk['D_LOC_TYPE'].replace(replacement_dict)\n\n\n\n\n\n\n\n\n\nThe following chart shows the frequency of different types of activities for which walking is used. The most common activity is ‘Home activities not related to work, school, or online’, indicating that walking is most frequently used for local errands or tasks around the house. This is followed by ‘Work for pay’ and ‘Change type of transportation/transfer’. Activities like ‘Social (visit friends, relatives, etc.)’, ‘Medical (medical appointment, medical procedure, etc.)’, and ‘Recreation-watch/observe (movies, concert, sports event, etc.)’ have lower frequencies.\n\n# Find out activity type\nactivity_dict = { 1: 'Home activities not related to work, school, or online',\n                 2: 'Homework, class related assignments or attended an online course',\n                 3: 'Attended classes',\n                 4: 'Attended other school activities (performances, meetings, clubs)',\n                 5: 'Work for pay',\n                 6: 'Personal business (banking or ATM, salon, library)',\n                 7: 'Online personal business (banking, e-mail, etc.)',\n                 8: 'Everyday shopping (grocery, drug store, gas, etc.)',\n                 9: 'Major shopping (appliances, cars, home furnishings, clothes, etc.)',\n                 10: 'Online shopping for products, services or goods',\n                 11: 'Eat out (restaurant, drive-thru, etc.)',\n                 12: 'Social (visit friends, relatives, etc.)',\n                 13: 'Social/community/religious (meetings, worhship, wedding, funeral, etc.)',\n                 14: 'Recreation- active participation (sports, exercise, walk the dog, etc.)',\n                 15: 'Recreation-watch/observe (movies, concert, sports event, etc.)',\n                 16: 'Medical (medical appointment, medical procedure, etc.)',\n                 17: 'Pick up passenger',\n                 18: 'Drop off passenger',\n                 19: 'Change type of transportation/transfer',\n                 20: 'Accompany household member',\n                 96: 'Other activity'}\n\nwalk['ACTIV1'] = walk['ACTIV1'].replace(activity_dict)\n\nplt.figure(figsize=(10, 8))\n\n\nactivity_counts = walk['ACTIV1'].value_counts()\nsns.barplot(y=activity_counts.index, x=activity_counts.values)\nplt.title('Frequency of Walk Activity Type')\nplt.xlabel('Count')\nplt.ylabel('Activity')\n\nfor index, value in enumerate(activity_counts.values):\n    plt.text(value, index, f'{value}')\n\nplt.show()\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\28425172.py:24: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  walk['ACTIV1'] = walk['ACTIV1'].replace(activity_dict)"
  },
  {
    "objectID": "Final.html#who-prefer-to-walk",
    "href": "Final.html#who-prefer-to-walk",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "1.2 Who Prefer to Walk",
    "text": "1.2 Who Prefer to Walk\nThen, the following analysis of Philadelphia’s pedestrian demographics in 2012 reveals a nuanced portrait influenced by various socioeconomic factors. The data on total vehicles indicates that individuals with no vehicles in their household are the most likely to walk, which is consistent across all income brackets except for the highest and lowest, where walking is less prevalent. Income distribution among pedestrians shows a fairly even spread, with slight peaks in the middle-income ranges, suggesting that walking is not exclusively linked to any single income level.\nGender distribution shows a modest preference for walking among females compared to males. Age-wise, the 25-74 age group is the most inclined to walk, with a notable peak in the 55-59 bracket, highlighting the potential for walking as a consistent transportation choice across a broad adult age spectrum.\nRacial demographics indicate that White individuals and those identifying as Asian are more represented among walkers than other races, with Black/African American and Hispanic or Latino individuals walking less by comparison. Education level data shows a clear trend: individuals with higher educational attainment, specifically those with a bachelor’s or graduate degree, are more likely to walk than those with lower levels of education or some college credit.\nIn summary, the typical pedestrian in Philadelphia in 2012 would likely be a person without a vehicle in their household, belonging to the middle-income bracket, and leaning slightly towards the female demographic. Age-wise, adults, particularly those between 25 to 74 years old, with a concentration around late 50s, are the most common walkers. A higher educational background correlates positively with the likelihood of walking, while White and Asian residents tend to walk more than other racial groups. These insights draw a picture of pedestrians in Philadelphia as a diverse group with a significant representation among middle-aged, educated individuals, suggesting that walking is a transportation mode that cuts across various socioeconomic layers, albeit with certain demographic tendencies.\n\n# Load other df\nhh = pd.read_excel('data/1_Household_Public.xlsx')\n\nper = pd.read_excel('data/2_Person_Public.xlsx')\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nwalk = walk.merge(hh[['HH_ID', 'TOT_VEH', 'INCOME']], on='HH_ID', how='left')\nwalk = walk.merge(per[['PERSON_ID', 'GEND', 'AGECAT', 'RACE', 'EDUCA']], on='PERSON_ID', how='left')\n\n\n# Create mappings for the variables hh and person \ngend_mapping = {1: 'Male', 2: 'Female', 99: 'Refused'}\nagecat_mapping = {\n    1: '5 or younger', 2: '6 to 12', 3: '13 to 15', 4: '16 to 17', \n    5: '18 to 24', 6: '25 to 34', 7: '35 to 44', 8: '45 to 54', \n    9: '55 to 64', 10: '65 to 74', 11: '75 to 85', 12: '86 and over',\n    98: \"Don't know\", 99: 'Refused'\n}\n\nrace_mapping = {\n    1: 'White/Caucasian', 2: 'Black/African American', 3: 'Hispanic or Latino',\n    4: 'American Indian or Alaska Native', 5: 'Asian', 6: 'Native Hawaiian or Pacific Islander',\n    97: 'Other, Specify', 98: \"Don't Know\", 99: 'Refused', 100: 'Multi-race'\n}\neduca_mapping = {\n    1: 'Not a high school graduate', 2: 'High school graduate', 3: 'Some college credit',\n    4: 'Associate or technical school degree', 5: \"Bachelor's or undergraduate degree\",\n    6: 'Graduate degree', 97: 'Other', 98: \"Don't know\", 99: 'Refused'\n}\nincome_mapping = {\n    1: '$0 to $9,999', 2: '$10,000 to $24,999', 3: '$25,000 to $34,999', 4: '$35,000 to $49,999',\n    5: '$50,000 to $74,999', 6: '$75,000 to $99,999', 7: '$100,000 to $149,999',\n    8: '$150,000 to $199,999', 9: '$200,000 to $249,999', 10: '$250,000 or more',\n    98: \"Don't know\", 99: 'Refused'\n}\n\nwalk['GEND'] = walk['GEND'].map(gend_mapping)\nwalk['AGECAT'] = walk['AGECAT'].map(agecat_mapping)\nwalk['RACE'] = walk['RACE'].map(race_mapping)\nwalk['EDUCA'] = walk['EDUCA'].map(educa_mapping)\nwalk['INCOME'] = walk['INCOME'].map(income_mapping)\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))  \n\nwalk['TOT_VEH'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 0], title='Total Vehicles')\nwalk['INCOME'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 1], title='Income')\nwalk['GEND'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 2], title='Gender')\nwalk['AGECAT'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 0], title='Age Category')\nwalk['RACE'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 1], title='Race')\nwalk['EDUCA'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 2], title='Education')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nIn conclusion, the multifaceted examination of walking trips in Philadelphia in 2012 reveals that walking is a mode of transportation embraced across a spectrum of socioeconomic backgrounds, with particular tendencies shaped by the absence of vehicles, middle-income brackets, and higher educational attainments. Notably, the proclivity to walk is slightly more common among females and notably prevalent in the 25-74 age demographic, with a surprising peak among those in their late fifties. Additionally, while White and Asian residents are more represented among pedestrians, the data indicates that walking is a universally adopted practice with a presence in every income category and demographic segment. These findings reflect the inherent complexity of pedestrian movement patterns and suggest that walking, as an integral element of urban life, is influenced by a confluence of personal, economic, and cultural factors that define the pedestrian landscape of Philadelphia."
  },
  {
    "objectID": "Final.html#why-and-who-walk-in-center-city",
    "href": "Final.html#why-and-who-walk-in-center-city",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "3.1 Why and Who Walk in Center City",
    "text": "3.1 Why and Who Walk in Center City\nAfter uncovering the pedestrain busy district of center city, here in this section, I specifically examined the walk trips and pedestrains in center city.\nIn my exploration of pedestrian activities within Philadelphia’s central district, I identified distinctive patterns of movement. The data indicated a high frequency of ‘transfer’ activities, which suggests that the central district serves not only as a destination but also as a pivotal hub for pedestrian movement through the city. This is reflective of the dense network of public transit and the district’s role as a connector for various parts of the city. Among other prominent activities, ‘work for pay’ and ‘eat out (restaurant, drive-thru, etc.)’ were also significant, highlighting the central district’s commercial and social importance. Surprisingly, ‘home activities’ were the most frequent type of walk, which may be attributed to the residential pockets within the central district or the tendency of individuals to categorize errands close to home as ‘home activities’.\n\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\n# filter out the walk trip in the central district\n\nwalk_gdf = gpd.GeoDataFrame(walk, geometry=gpd.points_from_xy(walk.origin_lon, walk.origin_lat))\n\nwalk_gdf.crs = districts_gdf.crs\n\ncentral_polygon = districts_gdf.loc[districts_gdf['DIST_NAME'] == 'Central', 'geometry'].squeeze()\n\nwalk_in_central = walk_gdf[walk_gdf.geometry.within(central_polygon)]\n\nwalk_in_central.head()\n\n\n\n\n\n\n\n\nID\nHH_ID\nPERSON_NUM\nPERSON_ID\nHH_WEIGHT\nP_WEIGHT\nTOUR_NUM\nWKSUB_NUM\nWKSUB_ID\nTRIP_NUM\n...\nAGECAT\nRACE\nEDUCA\norigin_tra\norigin_lat\norigin_lon\ndestination_tra\ndestination_lat\ndestination_lon\ngeometry\n\n\n\n\n0\n13\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n3\n...\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000804\n39.948566\n-75.167755\n000300\n39.957150\n-75.171232\nPOINT (-75.16775 39.94857)\n\n\n1\n14\n100206\n1\n10020601\n204.106167\n281.143358\n1.0\nNaN\n1.002060e+11\n4\n...\n45 to 54\nNaN\nBachelor's or undergraduate degree\n000300\n39.957150\n-75.171232\n000804\n39.948566\n-75.167755\nPOINT (-75.17123 39.95715)\n\n\n2\n314\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n4\n...\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n001002\n39.945006\n-75.146618\nPOINT (-75.14662 39.94501)\n\n\n3\n315\n102372\n1\n10237201\n209.139870\n218.215946\n1.0\nNaN\n1.023720e+11\n5\n...\n35 to 44\nNaN\nGraduate degree\n001002\n39.945006\n-75.146618\n000902\n39.947161\n-75.156637\nPOINT (-75.14662 39.94501)\n\n\n4\n1009\n109412\n1\n10941201\n193.156252\n82.416676\n1.0\nNaN\n1.094120e+11\n3\n...\n65 to 74\nNaN\nGraduate degree\n000500\n39.951955\n-75.158176\n000600\n39.949386\n-75.158334\nPOINT (-75.15818 39.95195)\n\n\n\n\n5 rows × 95 columns\n\n\n\n\nactivity_mapping = { 1: 'Home activities not related to work, school, or online',\n                 2: 'Homework, class related assignments or attended an online course',\n                 3: 'Attended classes',\n                 4: 'Attended other school activities (performances, meetings, clubs)',\n                 5: 'Work for pay',\n                 6: 'Personal business (banking or ATM, salon, library)',\n                 7: 'Online personal business (banking, e-mail, etc.)',\n                 8: 'Everyday shopping (grocery, drug store, gas, etc.)',\n                 9: 'Major shopping (appliances, cars, home furnishings, clothes, etc.)',\n                 10: 'Online shopping for products, services or goods',\n                 11: 'Eat out (restaurant, drive-thru, etc.)',\n                 12: 'Social (visit friends, relatives, etc.)',\n                 13: 'Social/community/religious (meetings, worhship, wedding, funeral, etc.)',\n                 14: 'Recreation- active participation (sports, exercise, walk the dog, etc.)',\n                 15: 'Recreation-watch/observe (movies, concert, sports event, etc.)',\n                 16: 'Medical (medical appointment, medical procedure, etc.)',\n                 17: 'Pick up passenger',\n                 18: 'Drop off passenger',\n                 19: 'Change type of transportation/transfer',\n                 20: 'Accompany household member',\n                 96: 'Other activity'}\n\nwalk_in_central['ACTIV1'] = walk_in_central['ACTIV1'].map(activity_mapping)\n\n# Plotting\nplt.figure(figsize=(10, 8)) \nactivity_counts = walk_in_central['ACTIV1'].value_counts()\n\n\nordered_activities = activity_counts.reindex(activity_mapping.values())\n\n\nordered_activities.plot(kind='bar')\n\nplt.title('Frequency of Walk Activity Type')\nplt.xlabel('Activity')\nplt.ylabel('Count')\n\n\nplt.xticks(rotation=90) \n\n\nfor index, value in enumerate(ordered_activities.values):\n    plt.text(index, value, f'{value}') \n\nplt.tight_layout() \nplt.show()\n\nD:\\Anaconda\\Install\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\n\n\n\n\n\n\n\n\n\nUpon reprofiling the pedestrian demographic within the central district, I found that the socioeconomic characteristics closely mirrored those observed citywide. Vehicle ownership, income, age, race, gender, and education level demonstrated similar trends, with no significant deviations. This lack of disparity suggests a consistent pedestrian demographic across the city, irrespective of the more intense walking activity in the central district. Most walkers belonged to households without a vehicle, spanned across a diverse range of income levels, and were predominantly White/Caucasian with at least a graduate degree, reflecting the broader city’s pedestrian profile. However, it was interesting to note that the central district’s pedestrian population was just as diverse as the rest of Philadelphia, reinforcing the notion that walking as a mode of transport transcends socioeconomic boundaries within urban centers.\n\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))  \n\nwalk_in_central['TOT_VEH'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 0], title='Total Vehicles')\nwalk_in_central['INCOME'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 1], title='Income')\nwalk_in_central['GEND'].value_counts().sort_index().plot(kind='bar', ax=axs[0, 2], title='Gender')\nwalk_in_central['AGECAT'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 0], title='Age Category')\nwalk_in_central['RACE'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 1], title='Race')\nwalk_in_central['EDUCA'].value_counts().sort_index().plot(kind='bar', ax=axs[1, 2], title='Education')\n\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "Final.html#what-are-there-in-center-city-attracting-people-to-walk-here",
    "href": "Final.html#what-are-there-in-center-city-attracting-people-to-walk-here",
    "title": "Unveiling the Dynamics of Pedestrian Movement in Center City, Philadelphia",
    "section": "3.2 What are There in Center City Attracting People to Walk Here",
    "text": "3.2 What are There in Center City Attracting People to Walk Here\nIn the latter half of my analysis of Center City, I delved into the urban elements that contribute to its high pedestrian traffic. I used OpenStreetMap to overlay various components of the urban environment, revealing a dense and intricate web of walkways that form the backbone of pedestrian movement in the area. My mapping highlighted an extensive network of roads frequented by pedestrians, which are well-serviced by an array of public transit options, including numerous bus stops and metro stations strategically located throughout the district.\nThe presence of these amenities suggests a cityscape thoughtfully designed to encourage walking, where the convenience of public transport complements pedestrian pathways. Moreover, my data visualizations pinpointed clusters of restaurants, schools, and commercial blocks, which serve as vital nodes of activity, drawing people onto the streets. These commercial hubs are not only destinations but also waypoints that enliven the pedestrian experience with their vibrancy and accessibility.\n\nimport osmnx as ox\nox.config(use_cache=True, log_console=True)\n\n# For bus stops\nbus_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'highway': 'bus_stop'})\n\n# For metro stops \nmetro_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'railway': 'station'})\n\n# For restaurants\nrestaurants = ox.geometries_from_place('Center City,Philadelphia, PA', tags={\"amenity\": [\"pub\", \"bar\", \"restaurant\"]})\n\n# For schools\nschools = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'amenity': 'school'})\n\n# For commercial blocks\ncommercial = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'landuse': 'commercial'})\n\n# For parks\nparks = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'leisure': 'park'})\n\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:2: UserWarning: The `utils.config` function is deprecated and will be removed in a future release. Instead, use the `settings` module directly to configure a global setting's value. For example, `ox.settings.log_console=True`.\n  ox.config(use_cache=True, log_console=True)\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:5: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  bus_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'highway': 'bus_stop'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:8: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  metro_stops = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'railway': 'station'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:11: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  restaurants = ox.geometries_from_place('Center City,Philadelphia, PA', tags={\"amenity\": [\"pub\", \"bar\", \"restaurant\"]})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:14: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  schools = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'amenity': 'school'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:17: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  commercial = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'landuse': 'commercial'})\nC:\\Users\\gaoxi\\AppData\\Local\\Temp\\ipykernel_29064\\2733245946.py:20: UserWarning: The `geometries` module and `geometries_from_X` functions have been renamed the `features` module and `features_from_X` functions. Use these instead. The `geometries` module and function names are deprecated and will be removed in a future release.\n  parks = ox.geometries_from_place('Center City,Philadelphia, PA', tags={'leisure': 'park'})\n\n\n\n# the \"walk\" network\nG = ox.graph_from_address(\"Center City, Philadelphia, PA\", network_type=\"walk\")\nox.plot_graph(ox.project_graph(G), node_size=0)\n\n\n\n\n\n\n\n\n\n\nG_cc = ox.graph_from_polygon(central_polygon, network_type=\"walk\")\n\n# only get the edges\ncc_edges = ox.graph_to_gdfs(G_cc, edges=True, nodes=False)\n\n# add the neighborhood boundaries\nboundary = gpd.GeoSeries([central_polygon], crs=\"EPSG:4326\")\n\ncc_edges.explore(tiles='cartodb positron')\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nimport geopandas as gpd\n\ncentroid = central_polygon.centroid\ncentral_point = centroid\n\nlongitude = central_point.x\nlatitude = central_point.y\n\n\nimport folium\n\nbus = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in bus_stops.iterrows():\n    folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Bus Stop').add_to(bus)\n\nbus\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nmetro = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in metro_stops.iterrows():\n    folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Metro Stops').add_to(metro)\n\nmetro\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nrestaurant_points = restaurants[restaurants.geometry.type == 'Point']\n\nmap_center = restaurant_points.geometry.unary_union.centroid\n\nres_m = folium.Map(location=[map_center.y, map_center.x], zoom_start=14)\n\nfor idx, row in restaurant_points.iterrows():\n    folium.Marker(\n        location=[row.geometry.y, row.geometry.x], \n        popup='Restaurant'\n    ).add_to(res_m)\n\nres_m\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nschools_points = schools[schools.geometry.type == 'Point']\n\nmap_center = schools_points.geometry.unary_union.centroid\n\nschools_map = folium.Map(location=[map_center.y, map_center.x], zoom_start=14)\n\nfor idx, row in schools_points.iterrows():\n    marker = folium.Marker(location=[row.geometry.y, row.geometry.x], popup='Schools')\n    marker.add_to(schools_map)\n\nschools_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\n\nfrom shapely.geometry import Polygon, MultiPolygon\ncommerce_m = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, row in commercial.iterrows():\n    if isinstance(row.geometry, (Polygon, MultiPolygon)):\n        folium.GeoJson(row.geometry, \n                        popup='Commercial Block',\n                        style_function=lambda x: {'fillColor': 'blue', 'color': 'blue'}\n                       ).add_to(commerce_m)\n\ncommerce_m\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nIn addition to these urban features, the green spaces represented by parks emerged as significant attractors for walkers, offering respite and recreational space amidst the urban fabric. These verdant areas likely contribute to the appeal of walking by enhancing the environmental quality and aesthetic of the city.\n\nparks_map = folium.Map(location=[latitude, longitude], zoom_start=13)\n\nfor idx, park in parks.iterrows():\n    if isinstance(park.geometry, (Polygon, MultiPolygon)):\n        folium.GeoJson(\n            data=park.geometry.__geo_interface__,\n            popup='Park',\n            style_function=lambda x: {'fillColor': 'green', 'color': 'green'}\n        ).add_to(parks_map)\n\nparks_map\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook\n\n\nOverall, my investigation paints a picture of Center City as a robust hub of pedestrian activity, supported by a well-integrated system of walkways, transit stops, commercial establishments, educational institutions, and green spaces. Each element plays a role in creating an inviting pedestrian environment, showcasing the multifaceted allure of Center City for walkers. The harmonious interplay between these factors not only facilitates but also enriches the pedestrian experience, affirming Center City’s reputation as a vibrant and walkable urban center."
  }
]